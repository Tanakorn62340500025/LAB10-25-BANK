
LAB10-2-BANK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006570  08006570  00016570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006768  08006768  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006770  08006770  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006770  08006770  00016770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000028  080067a0  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080067a0  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010731  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ce  00000000  00000000  00030789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00032958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00033908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a8e  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010999  00000000  00000000  0004c27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b00f  00000000  00000000  0005cc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000471c  00000000  00000000  000f7c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006554 	.word	0x08006554

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08006554 	.word	0x08006554

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_frsub>:
 8000b74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b78:	e002      	b.n	8000b80 <__addsf3>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_fsub>:
 8000b7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b80 <__addsf3>:
 8000b80:	0042      	lsls	r2, r0, #1
 8000b82:	bf1f      	itttt	ne
 8000b84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b88:	ea92 0f03 	teqne	r2, r3
 8000b8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b94:	d06a      	beq.n	8000c6c <__addsf3+0xec>
 8000b96:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b9e:	bfc1      	itttt	gt
 8000ba0:	18d2      	addgt	r2, r2, r3
 8000ba2:	4041      	eorgt	r1, r0
 8000ba4:	4048      	eorgt	r0, r1
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	bfb8      	it	lt
 8000baa:	425b      	neglt	r3, r3
 8000bac:	2b19      	cmp	r3, #25
 8000bae:	bf88      	it	hi
 8000bb0:	4770      	bxhi	lr
 8000bb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bce:	bf18      	it	ne
 8000bd0:	4249      	negne	r1, r1
 8000bd2:	ea92 0f03 	teq	r2, r3
 8000bd6:	d03f      	beq.n	8000c58 <__addsf3+0xd8>
 8000bd8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bdc:	fa41 fc03 	asr.w	ip, r1, r3
 8000be0:	eb10 000c 	adds.w	r0, r0, ip
 8000be4:	f1c3 0320 	rsb	r3, r3, #32
 8000be8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf0:	d502      	bpl.n	8000bf8 <__addsf3+0x78>
 8000bf2:	4249      	negs	r1, r1
 8000bf4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bfc:	d313      	bcc.n	8000c26 <__addsf3+0xa6>
 8000bfe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c02:	d306      	bcc.n	8000c12 <__addsf3+0x92>
 8000c04:	0840      	lsrs	r0, r0, #1
 8000c06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0a:	f102 0201 	add.w	r2, r2, #1
 8000c0e:	2afe      	cmp	r2, #254	; 0xfe
 8000c10:	d251      	bcs.n	8000cb6 <__addsf3+0x136>
 8000c12:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	ea40 0003 	orr.w	r0, r0, r3
 8000c24:	4770      	bx	lr
 8000c26:	0049      	lsls	r1, r1, #1
 8000c28:	eb40 0000 	adc.w	r0, r0, r0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	bf28      	it	cs
 8000c30:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c34:	d2ed      	bcs.n	8000c12 <__addsf3+0x92>
 8000c36:	fab0 fc80 	clz	ip, r0
 8000c3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c46:	bfaa      	itet	ge
 8000c48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c4c:	4252      	neglt	r2, r2
 8000c4e:	4318      	orrge	r0, r3
 8000c50:	bfbc      	itt	lt
 8000c52:	40d0      	lsrlt	r0, r2
 8000c54:	4318      	orrlt	r0, r3
 8000c56:	4770      	bx	lr
 8000c58:	f092 0f00 	teq	r2, #0
 8000c5c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c60:	bf06      	itte	eq
 8000c62:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c66:	3201      	addeq	r2, #1
 8000c68:	3b01      	subne	r3, #1
 8000c6a:	e7b5      	b.n	8000bd8 <__addsf3+0x58>
 8000c6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c74:	bf18      	it	ne
 8000c76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7a:	d021      	beq.n	8000cc0 <__addsf3+0x140>
 8000c7c:	ea92 0f03 	teq	r2, r3
 8000c80:	d004      	beq.n	8000c8c <__addsf3+0x10c>
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	bf08      	it	eq
 8000c88:	4608      	moveq	r0, r1
 8000c8a:	4770      	bx	lr
 8000c8c:	ea90 0f01 	teq	r0, r1
 8000c90:	bf1c      	itt	ne
 8000c92:	2000      	movne	r0, #0
 8000c94:	4770      	bxne	lr
 8000c96:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9a:	d104      	bne.n	8000ca6 <__addsf3+0x126>
 8000c9c:	0040      	lsls	r0, r0, #1
 8000c9e:	bf28      	it	cs
 8000ca0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca4:	4770      	bx	lr
 8000ca6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000caa:	bf3c      	itt	cc
 8000cac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb0:	4770      	bxcc	lr
 8000cb2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	4770      	bx	lr
 8000cc0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc4:	bf16      	itet	ne
 8000cc6:	4608      	movne	r0, r1
 8000cc8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ccc:	4601      	movne	r1, r0
 8000cce:	0242      	lsls	r2, r0, #9
 8000cd0:	bf06      	itte	eq
 8000cd2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cd6:	ea90 0f01 	teqeq	r0, r1
 8000cda:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_ui2f>:
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e004      	b.n	8000cf0 <__aeabi_i2f+0x8>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_i2f>:
 8000ce8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cec:	bf48      	it	mi
 8000cee:	4240      	negmi	r0, r0
 8000cf0:	ea5f 0c00 	movs.w	ip, r0
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	e01c      	b.n	8000d3e <__aeabi_l2f+0x2a>

08000d04 <__aeabi_ul2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e00a      	b.n	8000d28 <__aeabi_l2f+0x14>
 8000d12:	bf00      	nop

08000d14 <__aeabi_l2f>:
 8000d14:	ea50 0201 	orrs.w	r2, r0, r1
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__aeabi_l2f+0x14>
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	ea5f 0c01 	movs.w	ip, r1
 8000d2c:	bf02      	ittt	eq
 8000d2e:	4684      	moveq	ip, r0
 8000d30:	4601      	moveq	r1, r0
 8000d32:	2000      	moveq	r0, #0
 8000d34:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d38:	bf08      	it	eq
 8000d3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d42:	fabc f28c 	clz	r2, ip
 8000d46:	3a08      	subs	r2, #8
 8000d48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d4c:	db10      	blt.n	8000d70 <__aeabi_l2f+0x5c>
 8000d4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d52:	4463      	add	r3, ip
 8000d54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d58:	f1c2 0220 	rsb	r2, r2, #32
 8000d5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d60:	fa20 f202 	lsr.w	r2, r0, r2
 8000d64:	eb43 0002 	adc.w	r0, r3, r2
 8000d68:	bf08      	it	eq
 8000d6a:	f020 0001 	biceq.w	r0, r0, #1
 8000d6e:	4770      	bx	lr
 8000d70:	f102 0220 	add.w	r2, r2, #32
 8000d74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d78:	f1c2 0220 	rsb	r2, r2, #32
 8000d7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d80:	fa21 f202 	lsr.w	r2, r1, r2
 8000d84:	eb43 0002 	adc.w	r0, r3, r2
 8000d88:	bf08      	it	eq
 8000d8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_uldivmod>:
 8000d90:	b953      	cbnz	r3, 8000da8 <__aeabi_uldivmod+0x18>
 8000d92:	b94a      	cbnz	r2, 8000da8 <__aeabi_uldivmod+0x18>
 8000d94:	2900      	cmp	r1, #0
 8000d96:	bf08      	it	eq
 8000d98:	2800      	cmpeq	r0, #0
 8000d9a:	bf1c      	itt	ne
 8000d9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000da0:	f04f 30ff 	movne.w	r0, #4294967295
 8000da4:	f000 b96e 	b.w	8001084 <__aeabi_idiv0>
 8000da8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db0:	f000 f806 	bl	8000dc0 <__udivmoddi4>
 8000db4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr

08000dc0 <__udivmoddi4>:
 8000dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	9d08      	ldr	r5, [sp, #32]
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	468c      	mov	ip, r1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f040 8083 	bne.w	8000ed6 <__udivmoddi4+0x116>
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	4617      	mov	r7, r2
 8000dd4:	d947      	bls.n	8000e66 <__udivmoddi4+0xa6>
 8000dd6:	fab2 f282 	clz	r2, r2
 8000dda:	b142      	cbz	r2, 8000dee <__udivmoddi4+0x2e>
 8000ddc:	f1c2 0020 	rsb	r0, r2, #32
 8000de0:	fa24 f000 	lsr.w	r0, r4, r0
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4097      	lsls	r7, r2
 8000de8:	ea40 0c01 	orr.w	ip, r0, r1
 8000dec:	4094      	lsls	r4, r2
 8000dee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df2:	0c23      	lsrs	r3, r4, #16
 8000df4:	fbbc f6f8 	udiv	r6, ip, r8
 8000df8:	fa1f fe87 	uxth.w	lr, r7
 8000dfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f10e 	mul.w	r1, r6, lr
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x60>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e12:	f080 8119 	bcs.w	8001048 <__udivmoddi4+0x288>
 8000e16:	4299      	cmp	r1, r3
 8000e18:	f240 8116 	bls.w	8001048 <__udivmoddi4+0x288>
 8000e1c:	3e02      	subs	r6, #2
 8000e1e:	443b      	add	r3, r7
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3310 	mls	r3, r8, r0, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	45a6      	cmp	lr, r4
 8000e36:	d909      	bls.n	8000e4c <__udivmoddi4+0x8c>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3e:	f080 8105 	bcs.w	800104c <__udivmoddi4+0x28c>
 8000e42:	45a6      	cmp	lr, r4
 8000e44:	f240 8102 	bls.w	800104c <__udivmoddi4+0x28c>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	443c      	add	r4, r7
 8000e4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e50:	eba4 040e 	sub.w	r4, r4, lr
 8000e54:	2600      	movs	r6, #0
 8000e56:	b11d      	cbz	r5, 8000e60 <__udivmoddi4+0xa0>
 8000e58:	40d4      	lsrs	r4, r2
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xaa>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f282 	clz	r2, r2
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d150      	bne.n	8000f14 <__udivmoddi4+0x154>
 8000e72:	1bcb      	subs	r3, r1, r7
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	2601      	movs	r6, #1
 8000e7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e82:	0c21      	lsrs	r1, r4, #16
 8000e84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0xe4>
 8000e94:	1879      	adds	r1, r7, r1
 8000e96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0xe2>
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	f200 80e9 	bhi.w	8001074 <__udivmoddi4+0x2b4>
 8000ea2:	4684      	mov	ip, r0
 8000ea4:	1ac9      	subs	r1, r1, r3
 8000ea6:	b2a3      	uxth	r3, r4
 8000ea8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000eb4:	fb08 f800 	mul.w	r8, r8, r0
 8000eb8:	45a0      	cmp	r8, r4
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x10c>
 8000ebc:	193c      	adds	r4, r7, r4
 8000ebe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x10a>
 8000ec4:	45a0      	cmp	r8, r4
 8000ec6:	f200 80d9 	bhi.w	800107c <__udivmoddi4+0x2bc>
 8000eca:	4618      	mov	r0, r3
 8000ecc:	eba4 0408 	sub.w	r4, r4, r8
 8000ed0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ed4:	e7bf      	b.n	8000e56 <__udivmoddi4+0x96>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d909      	bls.n	8000eee <__udivmoddi4+0x12e>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	f000 80b1 	beq.w	8001042 <__udivmoddi4+0x282>
 8000ee0:	2600      	movs	r6, #0
 8000ee2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	fab3 f683 	clz	r6, r3
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d14a      	bne.n	8000f8c <__udivmoddi4+0x1cc>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d302      	bcc.n	8000f00 <__udivmoddi4+0x140>
 8000efa:	4282      	cmp	r2, r0
 8000efc:	f200 80b8 	bhi.w	8001070 <__udivmoddi4+0x2b0>
 8000f00:	1a84      	subs	r4, r0, r2
 8000f02:	eb61 0103 	sbc.w	r1, r1, r3
 8000f06:	2001      	movs	r0, #1
 8000f08:	468c      	mov	ip, r1
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	d0a8      	beq.n	8000e60 <__udivmoddi4+0xa0>
 8000f0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f12:	e7a5      	b.n	8000e60 <__udivmoddi4+0xa0>
 8000f14:	f1c2 0320 	rsb	r3, r2, #32
 8000f18:	fa20 f603 	lsr.w	r6, r0, r3
 8000f1c:	4097      	lsls	r7, r2
 8000f1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000f22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f26:	40d9      	lsrs	r1, r3
 8000f28:	4330      	orrs	r0, r6
 8000f2a:	0c03      	lsrs	r3, r0, #16
 8000f2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f30:	fa1f f887 	uxth.w	r8, r7
 8000f34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f3c:	fb06 f108 	mul.w	r1, r6, r8
 8000f40:	4299      	cmp	r1, r3
 8000f42:	fa04 f402 	lsl.w	r4, r4, r2
 8000f46:	d909      	bls.n	8000f5c <__udivmoddi4+0x19c>
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f4e:	f080 808d 	bcs.w	800106c <__udivmoddi4+0x2ac>
 8000f52:	4299      	cmp	r1, r3
 8000f54:	f240 808a 	bls.w	800106c <__udivmoddi4+0x2ac>
 8000f58:	3e02      	subs	r6, #2
 8000f5a:	443b      	add	r3, r7
 8000f5c:	1a5b      	subs	r3, r3, r1
 8000f5e:	b281      	uxth	r1, r0
 8000f60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6c:	fb00 f308 	mul.w	r3, r0, r8
 8000f70:	428b      	cmp	r3, r1
 8000f72:	d907      	bls.n	8000f84 <__udivmoddi4+0x1c4>
 8000f74:	1879      	adds	r1, r7, r1
 8000f76:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7a:	d273      	bcs.n	8001064 <__udivmoddi4+0x2a4>
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d971      	bls.n	8001064 <__udivmoddi4+0x2a4>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4439      	add	r1, r7
 8000f84:	1acb      	subs	r3, r1, r3
 8000f86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f8a:	e778      	b.n	8000e7e <__udivmoddi4+0xbe>
 8000f8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000f90:	fa03 f406 	lsl.w	r4, r3, r6
 8000f94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f98:	431c      	orrs	r4, r3
 8000f9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000fa2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fa6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000faa:	431f      	orrs	r7, r3
 8000fac:	0c3b      	lsrs	r3, r7, #16
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fa1f f884 	uxth.w	r8, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000fc2:	458a      	cmp	sl, r1
 8000fc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000fc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x220>
 8000fce:	1861      	adds	r1, r4, r1
 8000fd0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fd4:	d248      	bcs.n	8001068 <__udivmoddi4+0x2a8>
 8000fd6:	458a      	cmp	sl, r1
 8000fd8:	d946      	bls.n	8001068 <__udivmoddi4+0x2a8>
 8000fda:	f1a9 0902 	sub.w	r9, r9, #2
 8000fde:	4421      	add	r1, r4
 8000fe0:	eba1 010a 	sub.w	r1, r1, sl
 8000fe4:	b2bf      	uxth	r7, r7
 8000fe6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ff2:	fb00 f808 	mul.w	r8, r0, r8
 8000ff6:	45b8      	cmp	r8, r7
 8000ff8:	d907      	bls.n	800100a <__udivmoddi4+0x24a>
 8000ffa:	19e7      	adds	r7, r4, r7
 8000ffc:	f100 31ff 	add.w	r1, r0, #4294967295
 8001000:	d22e      	bcs.n	8001060 <__udivmoddi4+0x2a0>
 8001002:	45b8      	cmp	r8, r7
 8001004:	d92c      	bls.n	8001060 <__udivmoddi4+0x2a0>
 8001006:	3802      	subs	r0, #2
 8001008:	4427      	add	r7, r4
 800100a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800100e:	eba7 0708 	sub.w	r7, r7, r8
 8001012:	fba0 8902 	umull	r8, r9, r0, r2
 8001016:	454f      	cmp	r7, r9
 8001018:	46c6      	mov	lr, r8
 800101a:	4649      	mov	r1, r9
 800101c:	d31a      	bcc.n	8001054 <__udivmoddi4+0x294>
 800101e:	d017      	beq.n	8001050 <__udivmoddi4+0x290>
 8001020:	b15d      	cbz	r5, 800103a <__udivmoddi4+0x27a>
 8001022:	ebb3 020e 	subs.w	r2, r3, lr
 8001026:	eb67 0701 	sbc.w	r7, r7, r1
 800102a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800102e:	40f2      	lsrs	r2, r6
 8001030:	ea4c 0202 	orr.w	r2, ip, r2
 8001034:	40f7      	lsrs	r7, r6
 8001036:	e9c5 2700 	strd	r2, r7, [r5]
 800103a:	2600      	movs	r6, #0
 800103c:	4631      	mov	r1, r6
 800103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001042:	462e      	mov	r6, r5
 8001044:	4628      	mov	r0, r5
 8001046:	e70b      	b.n	8000e60 <__udivmoddi4+0xa0>
 8001048:	4606      	mov	r6, r0
 800104a:	e6e9      	b.n	8000e20 <__udivmoddi4+0x60>
 800104c:	4618      	mov	r0, r3
 800104e:	e6fd      	b.n	8000e4c <__udivmoddi4+0x8c>
 8001050:	4543      	cmp	r3, r8
 8001052:	d2e5      	bcs.n	8001020 <__udivmoddi4+0x260>
 8001054:	ebb8 0e02 	subs.w	lr, r8, r2
 8001058:	eb69 0104 	sbc.w	r1, r9, r4
 800105c:	3801      	subs	r0, #1
 800105e:	e7df      	b.n	8001020 <__udivmoddi4+0x260>
 8001060:	4608      	mov	r0, r1
 8001062:	e7d2      	b.n	800100a <__udivmoddi4+0x24a>
 8001064:	4660      	mov	r0, ip
 8001066:	e78d      	b.n	8000f84 <__udivmoddi4+0x1c4>
 8001068:	4681      	mov	r9, r0
 800106a:	e7b9      	b.n	8000fe0 <__udivmoddi4+0x220>
 800106c:	4666      	mov	r6, ip
 800106e:	e775      	b.n	8000f5c <__udivmoddi4+0x19c>
 8001070:	4630      	mov	r0, r6
 8001072:	e74a      	b.n	8000f0a <__udivmoddi4+0x14a>
 8001074:	f1ac 0c02 	sub.w	ip, ip, #2
 8001078:	4439      	add	r1, r7
 800107a:	e713      	b.n	8000ea4 <__udivmoddi4+0xe4>
 800107c:	3802      	subs	r0, #2
 800107e:	443c      	add	r4, r7
 8001080:	e724      	b.n	8000ecc <__udivmoddi4+0x10c>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 ff12 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 fa3e 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 fbe8 	bl	800186c <MX_GPIO_Init>
  MX_DMA_Init();
 800109c:	f000 fbc6 	bl	800182c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010a0:	f000 fb9a 	bl	80017d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010a4:	f000 fa9e 	bl	80015e4 <MX_ADC1_Init>
  MX_SPI3_Init();
 80010a8:	f000 faee 	bl	8001688 <MX_SPI3_Init>
  MX_TIM3_Init();
 80010ac:	f000 fb24 	bl	80016f8 <MX_TIM3_Init>
  MX_TIM11_Init();
 80010b0:	f000 fb6e 	bl	8001790 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start(&htim3);
 80010b4:	4890      	ldr	r0, [pc, #576]	; (80012f8 <main+0x270>)
 80010b6:	f003 fb89 	bl	80047cc <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim11);
 80010ba:	4890      	ldr	r0, [pc, #576]	; (80012fc <main+0x274>)
 80010bc:	f003 fbe0 	bl	8004880 <HAL_TIM_Base_Start_IT>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	498f      	ldr	r1, [pc, #572]	; (8001300 <main+0x278>)
 80010c4:	488f      	ldr	r0, [pc, #572]	; (8001304 <main+0x27c>)
 80010c6:	f001 f8ed 	bl	80022a4 <HAL_ADC_Start_DMA>
//เอาไว้ตรงนี้เพื่อให้มันทำงาน
  	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	488d      	ldr	r0, [pc, #564]	; (8001308 <main+0x280>)
 80010d2:	f002 faf9 	bl	80036c8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    bitvhigh = ((4095*vhigh)/3.3);
 80010d6:	4b8d      	ldr	r3, [pc, #564]	; (800130c <main+0x284>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001310 <main+0x288>
 80010e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e4:	ee17 0a90 	vmov	r0, s15
 80010e8:	f7ff f9da 	bl	80004a0 <__aeabi_f2d>
 80010ec:	a380      	add	r3, pc, #512	; (adr r3, 80012f0 <main+0x268>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fb57 	bl	80007a4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fce9 	bl	8000ad4 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	4a83      	ldr	r2, [pc, #524]	; (8001314 <main+0x28c>)
 8001106:	6013      	str	r3, [r2, #0]
	    bitvlow = ((4095*vlow)/3.3);
 8001108:	4b83      	ldr	r3, [pc, #524]	; (8001318 <main+0x290>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001310 <main+0x288>
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	ee17 0a90 	vmov	r0, s15
 800111a:	f7ff f9c1 	bl	80004a0 <__aeabi_f2d>
 800111e:	a374      	add	r3, pc, #464	; (adr r3, 80012f0 <main+0x268>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fb3e 	bl	80007a4 <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fcd0 	bl	8000ad4 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a79      	ldr	r2, [pc, #484]	; (800131c <main+0x294>)
 8001138:	6013      	str	r3, [r2, #0]
	    if(sawtooth == 1)
 800113a:	4b79      	ldr	r3, [pc, #484]	; (8001320 <main+0x298>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001144:	eef4 7a47 	vcmp.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	f040 8100 	bne.w	8001350 <main+0x2c8>
	    {
				if(hz > 0)
 8001150:	4b74      	ldr	r3, [pc, #464]	; (8001324 <main+0x29c>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	f340 81b2 	ble.w	80014c6 <main+0x43e>
				{
						//static uint64_t timestamp = 0;
						if (micros() - timestamp > ( (250/hz)*(4095/(bitvhigh-bitvlow)) )     ) //100us = 10khz
 8001162:	f000 fc7d 	bl	8001a60 <micros>
 8001166:	4b70      	ldr	r3, [pc, #448]	; (8001328 <main+0x2a0>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	1a84      	subs	r4, r0, r2
 800116e:	eb61 0503 	sbc.w	r5, r1, r3
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fdc5 	bl	8000d04 <__aeabi_ul2f>
 800117a:	ee05 0a90 	vmov	s11, r0
 800117e:	4b69      	ldr	r3, [pc, #420]	; (8001324 <main+0x29c>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	eddf 6a69 	vldr	s13, [pc, #420]	; 800132c <main+0x2a4>
 8001188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800118c:	4b61      	ldr	r3, [pc, #388]	; (8001314 <main+0x28c>)
 800118e:	edd3 6a00 	vldr	s13, [r3]
 8001192:	4b62      	ldr	r3, [pc, #392]	; (800131c <main+0x294>)
 8001194:	edd3 7a00 	vldr	s15, [r3]
 8001198:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800119c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8001310 <main+0x288>
 80011a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80011a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a8:	eef4 5ae7 	vcmpe.f32	s11, s15
 80011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b0:	f340 8189 	ble.w	80014c6 <main+0x43e>
						{
								timestamp = micros();
 80011b4:	f000 fc54 	bl	8001a60 <micros>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	495a      	ldr	r1, [pc, #360]	; (8001328 <main+0x2a0>)
 80011be:	e9c1 2300 	strd	r2, r3, [r1]
								if(slopeup == 1)
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <main+0x2a8>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011cc:	eef4 7a47 	vcmp.f32	s15, s14
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	d13f      	bne.n	8001256 <main+0x1ce>
								{

										 bitvolt++;
 80011d6:	4b57      	ldr	r3, [pc, #348]	; (8001334 <main+0x2ac>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <main+0x2ac>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
										 if(bitvolt >= bitvhigh)
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <main+0x2ac>)
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <main+0x28c>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	db03      	blt.n	8001208 <main+0x180>
										 {
											 bitvolt = bitvlow;
 8001200:	4b46      	ldr	r3, [pc, #280]	; (800131c <main+0x294>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <main+0x2ac>)
 8001206:	6013      	str	r3, [r2, #0]
										 }
									//	 bitvoltuint%=4096;
										 bitvoltuint = bitvolt;
 8001208:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <main+0x2ac>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001212:	ee17 3a90 	vmov	r3, s15
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b47      	ldr	r3, [pc, #284]	; (8001338 <main+0x2b0>)
 800121a:	801a      	strh	r2, [r3, #0]
										 dataOut = bitvoltuint;
 800121c:	4b46      	ldr	r3, [pc, #280]	; (8001338 <main+0x2b0>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <main+0x2b4>)
 8001222:	801a      	strh	r2, [r3, #0]
										 if (hspi3.State == HAL_SPI_STATE_READY
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <main+0x2b8>)
 8001226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b01      	cmp	r3, #1
 800122e:	f47f af52 	bne.w	80010d6 <main+0x4e>
													 && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	4843      	ldr	r0, [pc, #268]	; (8001344 <main+0x2bc>)
 8001238:	f002 fa2e 	bl	8003698 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	f47f af49 	bne.w	80010d6 <main+0x4e>
															 == GPIO_PIN_SET)
										 {
												 MCP4922SetOutput(DACConfig, dataOut);
 8001244:	4b40      	ldr	r3, [pc, #256]	; (8001348 <main+0x2c0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4a3c      	ldr	r2, [pc, #240]	; (800133c <main+0x2b4>)
 800124a:	8812      	ldrh	r2, [r2, #0]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fbac 	bl	80019ac <MCP4922SetOutput>
 8001254:	e73f      	b.n	80010d6 <main+0x4e>
										 }
								  }
								  else if(slopedown == 1)
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <main+0x2c4>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001260:	eef4 7a47 	vcmp.f32	s15, s14
 8001264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001268:	f47f af35 	bne.w	80010d6 <main+0x4e>
								  {

										  bitvolt--;
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <main+0x2ac>)
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <main+0x2ac>)
 800127c:	edc3 7a00 	vstr	s15, [r3]
										  if(bitvolt <= bitvlow)
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <main+0x2ac>)
 8001282:	ed93 7a00 	vldr	s14, [r3]
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <main+0x294>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	d803      	bhi.n	800129e <main+0x216>
										  {
											  bitvolt = bitvhigh;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <main+0x28c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a26      	ldr	r2, [pc, #152]	; (8001334 <main+0x2ac>)
 800129c:	6013      	str	r3, [r2, #0]
										  }
										  bitvoltuint = bitvolt;
 800129e:	4b25      	ldr	r3, [pc, #148]	; (8001334 <main+0x2ac>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a8:	ee17 3a90 	vmov	r3, s15
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <main+0x2b0>)
 80012b0:	801a      	strh	r2, [r3, #0]
										  dataOut = bitvoltuint;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <main+0x2b0>)
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <main+0x2b4>)
 80012b8:	801a      	strh	r2, [r3, #0]
										  if (hspi3.State == HAL_SPI_STATE_READY
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <main+0x2b8>)
 80012bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f47f af07 	bne.w	80010d6 <main+0x4e>
														 && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <main+0x2bc>)
 80012ce:	f002 f9e3 	bl	8003698 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	f47f aefe 	bne.w	80010d6 <main+0x4e>
																 == GPIO_PIN_SET)
										  {
												 MCP4922SetOutput(DACConfig, dataOut);
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <main+0x2c0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <main+0x2b4>)
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fb61 	bl	80019ac <MCP4922SetOutput>
 80012ea:	e6f4      	b.n	80010d6 <main+0x4e>
 80012ec:	f3af 8000 	nop.w
 80012f0:	66666666 	.word	0x66666666
 80012f4:	400a6666 	.word	0x400a6666
 80012f8:	2000007c 	.word	0x2000007c
 80012fc:	20000164 	.word	0x20000164
 8001300:	20000044 	.word	0x20000044
 8001304:	2000011c 	.word	0x2000011c
 8001308:	40020000 	.word	0x40020000
 800130c:	20000008 	.word	0x20000008
 8001310:	457ff000 	.word	0x457ff000
 8001314:	20000010 	.word	0x20000010
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000070 	.word	0x20000070
 8001320:	2000006c 	.word	0x2000006c
 8001324:	20000004 	.word	0x20000004
 8001328:	20000058 	.word	0x20000058
 800132c:	437a0000 	.word	0x437a0000
 8001330:	20000074 	.word	0x20000074
 8001334:	20000068 	.word	0x20000068
 8001338:	20000050 	.word	0x20000050
 800133c:	20000052 	.word	0x20000052
 8001340:	200000c4 	.word	0x200000c4
 8001344:	40020400 	.word	0x40020400
 8001348:	20000000 	.word	0x20000000
 800134c:	20000014 	.word	0x20000014

						 }
				}

	    }
	    else if(sinewave == 1)
 8001350:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <main+0x448>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800135a:	eef4 7a47 	vcmp.f32	s15, s14
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	f47f aeb8 	bne.w	80010d6 <main+0x4e>
	    {
	    		if (micros() - timestamp > ( (250/hz)*(4095/(bitvhigh-bitvlow)) )     )
 8001366:	f000 fb7b 	bl	8001a60 <micros>
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <main+0x44c>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	ebb0 0802 	subs.w	r8, r0, r2
 8001374:	eb61 0903 	sbc.w	r9, r1, r3
 8001378:	4640      	mov	r0, r8
 800137a:	4649      	mov	r1, r9
 800137c:	f7ff fcc2 	bl	8000d04 <__aeabi_ul2f>
 8001380:	ee05 0a90 	vmov	s11, r0
 8001384:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <main+0x450>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eddf 6a54 	vldr	s13, [pc, #336]	; 80014dc <main+0x454>
 800138e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <main+0x458>)
 8001394:	edd3 6a00 	vldr	s13, [r3]
 8001398:	4b52      	ldr	r3, [pc, #328]	; (80014e4 <main+0x45c>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013a2:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80014e8 <main+0x460>
 80013a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80013aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ae:	eef4 5ae7 	vcmpe.f32	s11, s15
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	f340 8086 	ble.w	80014c6 <main+0x43e>
	    		{
	    			  timestamp = micros();
 80013ba:	f000 fb51 	bl	8001a60 <micros>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4944      	ldr	r1, [pc, #272]	; (80014d4 <main+0x44c>)
 80013c4:	e9c1 2300 	strd	r2, r3, [r1]
	    			  t = micros();
 80013c8:	f000 fb4a 	bl	8001a60 <micros>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fc96 	bl	8000d04 <__aeabi_ul2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a44      	ldr	r2, [pc, #272]	; (80014ec <main+0x464>)
 80013dc:	6013      	str	r3, [r2, #0]
					  A = 4095/2;
 80013de:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <main+0x468>)
 80013e0:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <main+0x46c>)
 80013e2:	601a      	str	r2, [r3, #0]
					  dcgain = (4095/2);
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <main+0x470>)
 80013e6:	4a43      	ldr	r2, [pc, #268]	; (80014f4 <main+0x46c>)
 80013e8:	601a      	str	r2, [r3, #0]
					  bitvolt = A*sin(2*(M_PI)*hz*t)+dcgain;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <main+0x468>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f856 	bl	80004a0 <__aeabi_f2d>
 80013f4:	4682      	mov	sl, r0
 80013f6:	468b      	mov	fp, r1
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <main+0x450>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f84f 	bl	80004a0 <__aeabi_f2d>
 8001402:	a331      	add	r3, pc, #196	; (adr r3, 80014c8 <main+0x440>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f8a2 	bl	8000550 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	e9c7 2300 	strd	r2, r3, [r7]
 8001414:	4b35      	ldr	r3, [pc, #212]	; (80014ec <main+0x464>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f841 	bl	80004a0 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001426:	f7ff f893 	bl	8000550 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b17 	vmov	d7, r2, r3
 8001432:	eeb0 0a47 	vmov.f32	s0, s14
 8001436:	eef0 0a67 	vmov.f32	s1, s15
 800143a:	f004 f855 	bl	80054e8 <sin>
 800143e:	ec53 2b10 	vmov	r2, r3, d0
 8001442:	4650      	mov	r0, sl
 8001444:	4659      	mov	r1, fp
 8001446:	f7ff f883 	bl	8000550 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4692      	mov	sl, r2
 8001450:	469b      	mov	fp, r3
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <main+0x470>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f822 	bl	80004a0 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4650      	mov	r0, sl
 8001462:	4659      	mov	r1, fp
 8001464:	f7fe febe 	bl	80001e4 <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fb30 	bl	8000ad4 <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <main+0x474>)
 8001478:	6013      	str	r3, [r2, #0]
					  bitvoltuint = bitvolt;
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <main+0x474>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001484:	ee17 3a90 	vmov	r3, s15
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <main+0x478>)
 800148c:	801a      	strh	r2, [r3, #0]
					  dataOut = bitvoltuint;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <main+0x478>)
 8001490:	881a      	ldrh	r2, [r3, #0]
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <main+0x47c>)
 8001494:	801a      	strh	r2, [r3, #0]
					  if (hspi3.State == HAL_SPI_STATE_READY
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <main+0x480>)
 8001498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	f47f ae19 	bne.w	80010d6 <main+0x4e>
									 && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 80014a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a8:	4818      	ldr	r0, [pc, #96]	; (800150c <main+0x484>)
 80014aa:	f002 f8f5 	bl	8003698 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	f47f ae10 	bne.w	80010d6 <main+0x4e>
											 == GPIO_PIN_SET)
					  {
							 MCP4922SetOutput(DACConfig, dataOut);
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <main+0x488>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <main+0x47c>)
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fa73 	bl	80019ac <MCP4922SetOutput>
	    bitvhigh = ((4095*vhigh)/3.3);
 80014c6:	e606      	b.n	80010d6 <main+0x4e>
 80014c8:	54442d18 	.word	0x54442d18
 80014cc:	401921fb 	.word	0x401921fb
 80014d0:	20000018 	.word	0x20000018
 80014d4:	20000058 	.word	0x20000058
 80014d8:	20000004 	.word	0x20000004
 80014dc:	437a0000 	.word	0x437a0000
 80014e0:	20000010 	.word	0x20000010
 80014e4:	20000070 	.word	0x20000070
 80014e8:	457ff000 	.word	0x457ff000
 80014ec:	20000064 	.word	0x20000064
 80014f0:	20000060 	.word	0x20000060
 80014f4:	44ffe000 	.word	0x44ffe000
 80014f8:	20000078 	.word	0x20000078
 80014fc:	20000068 	.word	0x20000068
 8001500:	20000050 	.word	0x20000050
 8001504:	20000052 	.word	0x20000052
 8001508:	200000c4 	.word	0x200000c4
 800150c:	40020400 	.word	0x40020400
 8001510:	20000000 	.word	0x20000000

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f003 ffd8 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <SystemClock_Config+0xc8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a26      	ldr	r2, [pc, #152]	; (80015dc <SystemClock_Config+0xc8>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <SystemClock_Config+0xc8>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <SystemClock_Config+0xcc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <SystemClock_Config+0xcc>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <SystemClock_Config+0xcc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001584:	2308      	movs	r3, #8
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f002 f8af 	bl	80036fc <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a4:	f000 fa76 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2103      	movs	r1, #3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fb11 	bl	8003bec <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015d0:	f000 fa60 	bl	8001a94 <Error_Handler>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3750      	adds	r7, #80	; 0x50
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40007000 	.word	0x40007000

080015e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <MX_ADC1_Init+0x9c>)
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <MX_ADC1_Init+0xa0>)
 80015fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <MX_ADC1_Init+0x9c>)
 80015fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <MX_ADC1_Init+0x9c>)
 800160c:	2201      	movs	r2, #1
 800160e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001612:	2200      	movs	r2, #0
 8001614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001628:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001636:	2201      	movs	r2, #1
 8001638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_ADC1_Init+0x9c>)
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_ADC1_Init+0x9c>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <MX_ADC1_Init+0x9c>)
 800164a:	f000 fca7 	bl	8001f9c <HAL_ADC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001654:	f000 fa1e 	bl	8001a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_ADC1_Init+0x9c>)
 800166a:	f000 ff33 	bl	80024d4 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001674:	f000 fa0e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	2000011c 	.word	0x2000011c
 8001684:	40012000 	.word	0x40012000

08001688 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_SPI3_Init+0x68>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <MX_SPI3_Init+0x6c>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_SPI3_Init+0x68>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_SPI3_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016be:	2220      	movs	r2, #32
 80016c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016d6:	220a      	movs	r2, #10
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_SPI3_Init+0x68>)
 80016dc:	f002 fc82 	bl	8003fe4 <HAL_SPI_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80016e6:	f000 f9d5 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200000c4 	.word	0x200000c4
 80016f4:	40003c00 	.word	0x40003c00

080016f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM3_Init+0x90>)
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <MX_TIM3_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_TIM3_Init+0x90>)
 800171c:	2264      	movs	r2, #100	; 0x64
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM3_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM3_Init+0x90>)
 8001728:	2264      	movs	r2, #100	; 0x64
 800172a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_TIM3_Init+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_TIM3_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <MX_TIM3_Init+0x90>)
 800173a:	f002 fff7 	bl	800472c <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001744:	f000 f9a6 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM3_Init+0x90>)
 8001756:	f003 f9fd 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001760:	f000 f998 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001764:	2320      	movs	r3, #32
 8001766:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_TIM3_Init+0x90>)
 8001772:	f003 fbf5 	bl	8004f60 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800177c:	f000 f98a 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000007c 	.word	0x2000007c
 800178c:	40000400 	.word	0x40000400

08001790 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_TIM11_Init+0x40>)
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <MX_TIM11_Init+0x44>)
 8001798:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <MX_TIM11_Init+0x40>)
 800179c:	2264      	movs	r2, #100	; 0x64
 800179e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_TIM11_Init+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_TIM11_Init+0x40>)
 80017a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_TIM11_Init+0x40>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_TIM11_Init+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_TIM11_Init+0x40>)
 80017bc:	f002 ffb6 	bl	800472c <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017c6:	f000 f965 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000164 	.word	0x20000164
 80017d4:	40014800 	.word	0x40014800

080017d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <MX_USART2_UART_Init+0x50>)
 80017e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_USART2_UART_Init+0x4c>)
 8001810:	f003 fc28 	bl	8005064 <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800181a:	f000 f93b 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000020c 	.word	0x2000020c
 8001828:	40004400 	.word	0x40004400

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_DMA_Init+0x3c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <MX_DMA_Init+0x3c>)
 800183c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_DMA_Init+0x3c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2038      	movs	r0, #56	; 0x38
 8001854:	f001 f9d3 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001858:	2038      	movs	r0, #56	; 0x38
 800185a:	f001 f9ec 	bl	8002c36 <HAL_NVIC_EnableIRQ>

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <MX_GPIO_Init+0x12c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a43      	ldr	r2, [pc, #268]	; (8001998 <MX_GPIO_Init+0x12c>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <MX_GPIO_Init+0x12c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a3c      	ldr	r2, [pc, #240]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b36      	ldr	r3, [pc, #216]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a35      	ldr	r2, [pc, #212]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a2e      	ldr	r2, [pc, #184]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <MX_GPIO_Init+0x12c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2120      	movs	r1, #32
 80018f6:	4829      	ldr	r0, [pc, #164]	; (800199c <MX_GPIO_Init+0x130>)
 80018f8:	f001 fee6 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001902:	4827      	ldr	r0, [pc, #156]	; (80019a0 <MX_GPIO_Init+0x134>)
 8001904:	f001 fee0 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	4825      	ldr	r0, [pc, #148]	; (80019a4 <MX_GPIO_Init+0x138>)
 800190e:	f001 fedb 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001918:	4820      	ldr	r0, [pc, #128]	; (800199c <MX_GPIO_Init+0x130>)
 800191a:	f001 fed5 	bl	80036c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800191e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_GPIO_Init+0x13c>)
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	481c      	ldr	r0, [pc, #112]	; (80019a4 <MX_GPIO_Init+0x138>)
 8001934:	f001 fd2c 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001938:	f44f 7308 	mov.w	r3, #544	; 0x220
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193e:	2301      	movs	r3, #1
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4812      	ldr	r0, [pc, #72]	; (800199c <MX_GPIO_Init+0x130>)
 8001952:	f001 fd1d 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	480c      	ldr	r0, [pc, #48]	; (80019a0 <MX_GPIO_Init+0x134>)
 8001970:	f001 fd0e 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_GPIO_Init+0x138>)
 800198c:	f001 fd00 	bl	8003390 <HAL_GPIO_Init>

}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40020800 	.word	0x40020800
 80019a8:	10210000 	.word	0x10210000

080019ac <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	80bb      	strh	r3, [r7, #4]
	//config คือ 4 bit บน เเละ dacoutput คือ 12 bit ล่าง
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	031b      	lsls	r3, r3, #12
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MCP4922SetOutput+0x44>)
 80019d4:	f001 fe78 	bl	80036c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2201      	movs	r2, #1
 80019de:	4619      	mov	r1, r3
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MCP4922SetOutput+0x48>)
 80019e2:	f002 fb89 	bl	80040f8 <HAL_SPI_Transmit_IT>
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40020400 	.word	0x40020400
 80019f4:	200000c4 	.word	0x200000c4

080019f8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_SPI_TxCpltCallback+0x24>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d105      	bne.n	8001a14 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <HAL_SPI_TxCpltCallback+0x28>)
 8001a10:	f001 fe5a 	bl	80036c8 <HAL_GPIO_WritePin>
	}
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200000c4 	.word	0x200000c4
 8001a20:	40020400 	.word	0x40020400

08001a24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a24:	b4b0      	push	{r4, r5, r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d10c      	bne.n	8001a4e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	1814      	adds	r4, r2, r0
 8001a44:	eb43 0501 	adc.w	r5, r3, r1
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001a4a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bcb0      	pop	{r4, r5, r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000164 	.word	0x20000164
 8001a5c:	20000048 	.word	0x20000048

08001a60 <micros>:

inline uint64_t micros()
{
 8001a60:	b4b0      	push	{r4, r5, r7}
 8001a62:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <micros+0x2c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <micros+0x30>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	1884      	adds	r4, r0, r2
 8001a78:	eb41 0503 	adc.w	r5, r1, r3
 8001a7c:	4622      	mov	r2, r4
 8001a7e:	462b      	mov	r3, r5
}
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bcb0      	pop	{r4, r5, r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000164 	.word	0x20000164
 8001a90:	20000048 	.word	0x20000048

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ade:	2007      	movs	r0, #7
 8001ae0:	f001 f882 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a33      	ldr	r2, [pc, #204]	; (8001bdc <HAL_ADC_MspInit+0xec>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d15f      	bne.n	8001bd2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_ADC_MspInit+0xf0>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <HAL_ADC_MspInit+0xf0>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_ADC_MspInit+0xf0>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_ADC_MspInit+0xf0>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_ADC_MspInit+0xf0>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_ADC_MspInit+0xf0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4821      	ldr	r0, [pc, #132]	; (8001be4 <HAL_ADC_MspInit+0xf4>)
 8001b5e:	f001 fc17 	bl	8003390 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <HAL_ADC_MspInit+0xfc>)
 8001b66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b82:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ba6:	4810      	ldr	r0, [pc, #64]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001ba8:	f001 f860 	bl	8002c6c <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001bb2:	f7ff ff6f 	bl	8001a94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_ADC_MspInit+0xf8>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2012      	movs	r0, #18
 8001bc8:	f001 f819 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bcc:	2012      	movs	r0, #18
 8001bce:	f001 f832 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40012000 	.word	0x40012000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	200001ac 	.word	0x200001ac
 8001bec:	40026410 	.word	0x40026410

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_SPI_MspInit+0x94>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d133      	bne.n	8001c7a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_SPI_MspInit+0x98>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <HAL_SPI_MspInit+0x98>)
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_SPI_MspInit+0x98>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_SPI_MspInit+0x98>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_SPI_MspInit+0x98>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_SPI_MspInit+0x98>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c4a:	2338      	movs	r3, #56	; 0x38
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <HAL_SPI_MspInit+0x9c>)
 8001c66:	f001 fb93 	bl	8003390 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2033      	movs	r0, #51	; 0x33
 8001c70:	f000 ffc5 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c74:	2033      	movs	r0, #51	; 0x33
 8001c76:	f000 ffde 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40003c00 	.word	0x40003c00
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020400 	.word	0x40020400

08001c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_TIM_Base_MspInit+0x70>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001cbe:	e01a      	b.n	8001cf6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_TIM_Base_MspInit+0x78>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d115      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_TIM_Base_MspInit+0x74>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	201a      	movs	r0, #26
 8001cec:	f000 ff87 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001cf0:	201a      	movs	r0, #26
 8001cf2:	f000 ffa0 	bl	8002c36 <HAL_NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40014800 	.word	0x40014800

08001d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_UART_MspInit+0x84>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d12b      	bne.n	8001d86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_UART_MspInit+0x88>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_UART_MspInit+0x88>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_UART_MspInit+0x88>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_UART_MspInit+0x88>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a10      	ldr	r2, [pc, #64]	; (8001d94 <HAL_UART_MspInit+0x88>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_UART_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d66:	230c      	movs	r3, #12
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d76:	2307      	movs	r3, #7
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_UART_MspInit+0x8c>)
 8001d82:	f001 fb05 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40004400 	.word	0x40004400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000

08001d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <NMI_Handler+0x4>

08001da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler+0x4>

08001dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de8:	f000 f8b8 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <ADC_IRQHandler+0x10>)
 8001df6:	f000 f914 	bl	8002022 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000011c 	.word	0x2000011c

08001e04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e0a:	f002 fd9b 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000164 	.word	0x20000164

08001e18 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <SPI3_IRQHandler+0x10>)
 8001e1e:	f002 f9f5 	bl	800420c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200000c4 	.word	0x200000c4

08001e2c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA2_Stream0_IRQHandler+0x10>)
 8001e32:	f001 f843 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200001ac 	.word	0x200001ac

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff ffd7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f003 fafd 	bl	8005490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff f8f7 	bl	8001088 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001ea8:	08006778 	.word	0x08006778
  ldr r2, =_sbss
 8001eac:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001eb0:	20000254 	.word	0x20000254

08001eb4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <DMA1_Stream0_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 fe81 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fdd8 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fe99 	bl	8002c52 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 fe61 	bl	8002bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000001c 	.word	0x2000001c
 8001f54:	20000024 	.word	0x20000024
 8001f58:	20000020 	.word	0x20000020

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000024 	.word	0x20000024
 8001f80:	20000250 	.word	0x20000250

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000250 	.word	0x20000250

08001f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e033      	b.n	800201a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fd98 	bl	8001af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fe2:	f023 0302 	bic.w	r3, r3, #2
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fba2 	bl	8002738 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
 800200a:	e001      	b.n	8002010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b20      	cmp	r3, #32
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d049      	beq.n	80020f8 <HAL_ADC_IRQHandler+0xd6>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d046      	beq.n	80020f8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d12b      	bne.n	80020e8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d127      	bne.n	80020e8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d119      	bne.n	80020e8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0220 	bic.w	r2, r2, #32
 80020c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f9cb 	bl	8002484 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0212 	mvn.w	r2, #18
 80020f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d057      	beq.n	80021da <HAL_ADC_IRQHandler+0x1b8>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d054      	beq.n	80021da <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d139      	bne.n	80021ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800216e:	2b00      	cmp	r3, #0
 8002170:	d12b      	bne.n	80021ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d124      	bne.n	80021ca <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d11d      	bne.n	80021ca <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d119      	bne.n	80021ca <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fc32 	bl	8002a34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 020c 	mvn.w	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	bf0c      	ite	eq
 80021fe:	2301      	moveq	r3, #1
 8002200:	2300      	movne	r3, #0
 8002202:	b2db      	uxtb	r3, r3
 8002204:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d017      	beq.n	800223c <HAL_ADC_IRQHandler+0x21a>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d014      	beq.n	800223c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10d      	bne.n	800223c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f93d 	bl	80024ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f06f 0201 	mvn.w	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b20      	cmp	r3, #32
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_ADC_IRQHandler+0x27a>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f043 0202 	orr.w	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f06f 0220 	mvn.w	r2, #32
 800228a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f917 	bl	80024c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0220 	mvn.w	r2, #32
 800229a:	601a      	str	r2, [r3, #0]
  }
}
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Start_DMA+0x1e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0ce      	b.n	8002460 <HAL_ADC_Start_DMA+0x1bc>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d018      	beq.n	800230a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022e8:	4b5f      	ldr	r3, [pc, #380]	; (8002468 <HAL_ADC_Start_DMA+0x1c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_ADC_Start_DMA+0x1c8>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0c9a      	lsrs	r2, r3, #18
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	3b01      	subs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f9      	bne.n	80022fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002318:	d107      	bne.n	800232a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002328:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	f040 8086 	bne.w	8002446 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002364:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002378:	d106      	bne.n	8002388 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f023 0206 	bic.w	r2, r3, #6
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
 8002386:	e002      	b.n	800238e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_ADC_Start_DMA+0x1cc>)
 8002398:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_ADC_Start_DMA+0x1d0>)
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	4a34      	ldr	r2, [pc, #208]	; (8002478 <HAL_ADC_Start_DMA+0x1d4>)
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	4a33      	ldr	r2, [pc, #204]	; (800247c <HAL_ADC_Start_DMA+0x1d8>)
 80023b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	334c      	adds	r3, #76	; 0x4c
 80023e6:	4619      	mov	r1, r3
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f000 fcec 	bl	8002dc8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d129      	bne.n	800245e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	e020      	b.n	800245e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_ADC_Start_DMA+0x1dc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d11b      	bne.n	800245e <HAL_ADC_Start_DMA+0x1ba>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	e00b      	b.n	800245e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000001c 	.word	0x2000001c
 800246c:	431bde83 	.word	0x431bde83
 8002470:	40012300 	.word	0x40012300
 8002474:	08002931 	.word	0x08002931
 8002478:	080029eb 	.word	0x080029eb
 800247c:	08002a07 	.word	0x08002a07
 8002480:	40012000 	.word	0x40012000

08002484 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e113      	b.n	8002718 <HAL_ADC_ConfigChannel+0x244>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d925      	bls.n	800254c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3b1e      	subs	r3, #30
 8002516:	2207      	movs	r2, #7
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43da      	mvns	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	400a      	ands	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68d9      	ldr	r1, [r3, #12]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	4603      	mov	r3, r0
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4403      	add	r3, r0
 800253e:	3b1e      	subs	r3, #30
 8002540:	409a      	lsls	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	e022      	b.n	8002592 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	2207      	movs	r2, #7
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	400a      	ands	r2, r1
 800256e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	4603      	mov	r3, r0
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4403      	add	r3, r0
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d824      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b05      	subs	r3, #5
 80025ac:	221f      	movs	r2, #31
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b05      	subs	r3, #5
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
 80025e2:	e04c      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d824      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b23      	subs	r3, #35	; 0x23
 80025fe:	221f      	movs	r2, #31
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43da      	mvns	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b23      	subs	r3, #35	; 0x23
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
 8002634:	e023      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b41      	subs	r3, #65	; 0x41
 8002648:	221f      	movs	r2, #31
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b41      	subs	r3, #65	; 0x41
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267e:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_ADC_ConfigChannel+0x250>)
 8002680:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_ADC_ConfigChannel+0x254>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10f      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1d8>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b12      	cmp	r3, #18
 8002692:	d10b      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_ADC_ConfigChannel+0x254>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d12b      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_ADC_ConfigChannel+0x258>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x1f4>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	d122      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_ADC_ConfigChannel+0x258>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_ADC_ConfigChannel+0x25c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_ADC_ConfigChannel+0x260>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0c9a      	lsrs	r2, r3, #18
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002700:	e002      	b.n	8002708 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3b01      	subs	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f9      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40012300 	.word	0x40012300
 8002728:	40012000 	.word	0x40012000
 800272c:	10000012 	.word	0x10000012
 8002730:	2000001c 	.word	0x2000001c
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <ADC_Init+0x1f0>)
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	4a58      	ldr	r2, [pc, #352]	; (800292c <ADC_Init+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00f      	b.n	8002836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002872:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	035a      	lsls	r2, r3, #13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e007      	b.n	80028ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ee:	025a      	lsls	r2, r3, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	029a      	lsls	r2, r3, #10
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	0f000001 	.word	0x0f000001

08002930 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d13c      	bne.n	80029c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d12b      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d127      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002984:	2b00      	cmp	r3, #0
 8002986:	d119      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0220 	bic.w	r2, r2, #32
 8002996:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff fd61 	bl	8002484 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029c2:	e00e      	b.n	80029e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff fd75 	bl	80024c0 <HAL_ADC_ErrorCallback>
}
 80029d6:	e004      	b.n	80029e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fd4d 	bl	8002498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fd4a 	bl	80024c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	; (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff8e 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff29 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff3e 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff8e 	bl	8002b3c <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5d 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff31 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff f984 	bl	8001f84 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e099      	b.n	8002dbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca8:	e00f      	b.n	8002cca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002caa:	f7ff f96b 	bl	8001f84 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d908      	bls.n	8002cca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e078      	b.n	8002dbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e8      	bne.n	8002caa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_DMA_Init+0x158>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d107      	bne.n	8002d34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0307 	bic.w	r3, r3, #7
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d117      	bne.n	8002d8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa91 	bl	8003298 <DMA_CheckFifoParam>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e016      	b.n	8002dbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa48 	bl	800322c <DMA_CalcBaseAndBitshift>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	f010803f 	.word	0xf010803f

08002dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_DMA_Start_IT+0x26>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e040      	b.n	8002e70 <HAL_DMA_Start_IT+0xa8>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d12f      	bne.n	8002e62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f9da 	bl	80031d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	223f      	movs	r2, #63	; 0x3f
 8002e22:	409a      	lsls	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0216 	orr.w	r2, r2, #22
 8002e36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0208 	orr.w	r2, r2, #8
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e005      	b.n	8002e6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d004      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2280      	movs	r2, #128	; 0x80
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00c      	b.n	8002eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2205      	movs	r2, #5
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_DMA_IRQHandler+0x258>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a92      	ldr	r2, [pc, #584]	; (8003118 <HAL_DMA_IRQHandler+0x25c>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2208      	movs	r2, #8
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0201 	orr.w	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0202 	orr.w	r2, r3, #2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2204      	movs	r2, #4
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f80:	2204      	movs	r2, #4
 8002f82:	409a      	lsls	r2, r3
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2210      	movs	r2, #16
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d043      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03c      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2210      	movs	r2, #16
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d018      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
 8002fea:	e01f      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
 8002ffc:	e016      	b.n	800302c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0208 	bic.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2220      	movs	r2, #32
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 808e 	beq.w	800315a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8086 	beq.w	800315a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2220      	movs	r2, #32
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b05      	cmp	r3, #5
 8003064:	d136      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0216 	bic.w	r2, r2, #22
 8003074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <HAL_DMA_IRQHandler+0x1da>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0208 	bic.w	r2, r2, #8
 80030a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	223f      	movs	r2, #63	; 0x3f
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d07d      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
        }
        return;
 80030d2:	e078      	b.n	80031c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01c      	beq.n	800311c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d108      	bne.n	8003102 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d030      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
 8003100:	e02b      	b.n	800315a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d027      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e022      	b.n	800315a <HAL_DMA_IRQHandler+0x29e>
 8003114:	2000001c 	.word	0x2000001c
 8003118:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0210 	bic.w	r2, r2, #16
 8003138:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	2b00      	cmp	r3, #0
 8003160:	d032      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	429a      	cmp	r2, r3
 8003190:	d307      	bcc.n	80031a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f2      	bne.n	8003186 <HAL_DMA_IRQHandler+0x2ca>
 80031a0:	e000      	b.n	80031a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e000      	b.n	80031c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031c6:	bf00      	nop
    }
  }
}
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop

080031d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d108      	bne.n	8003210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320e:	e007      	b.n	8003220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	60da      	str	r2, [r3, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3b10      	subs	r3, #16
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <DMA_CalcBaseAndBitshift+0x64>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <DMA_CalcBaseAndBitshift+0x68>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d909      	bls.n	800326e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	659a      	str	r2, [r3, #88]	; 0x58
 800326c:	e007      	b.n	800327e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	aaaaaaab 	.word	0xaaaaaaab
 8003294:	08006588 	.word	0x08006588

08003298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0x5a>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d856      	bhi.n	8003366 <DMA_CheckFifoParam+0xce>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <DMA_CheckFifoParam+0x28>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032e3 	.word	0x080032e3
 80032c8:	080032d1 	.word	0x080032d1
 80032cc:	08003367 	.word	0x08003367
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d046      	beq.n	800336a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e043      	b.n	800336a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032ea:	d140      	bne.n	800336e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f0:	e03d      	b.n	800336e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fa:	d121      	bne.n	8003340 <DMA_CheckFifoParam+0xa8>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d837      	bhi.n	8003372 <DMA_CheckFifoParam+0xda>
 8003302:	a201      	add	r2, pc, #4	; (adr r2, 8003308 <DMA_CheckFifoParam+0x70>)
 8003304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003308:	08003319 	.word	0x08003319
 800330c:	0800331f 	.word	0x0800331f
 8003310:	08003319 	.word	0x08003319
 8003314:	08003331 	.word	0x08003331
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	e030      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d025      	beq.n	8003376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332e:	e022      	b.n	8003376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003338:	d11f      	bne.n	800337a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333e:	e01c      	b.n	800337a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d903      	bls.n	800334e <DMA_CheckFifoParam+0xb6>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800334c:	e018      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      break;
 8003352:	e015      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00e      	beq.n	800337e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
      break;
 8003364:	e00b      	b.n	800337e <DMA_CheckFifoParam+0xe6>
      break;
 8003366:	bf00      	nop
 8003368:	e00a      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e008      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e006      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;   
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
    }
  } 
  
  return status; 
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e159      	b.n	8003660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f040 8148 	bne.w	800365a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d005      	beq.n	80033e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d130      	bne.n	8003444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 0201 	and.w	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b03      	cmp	r3, #3
 800344e:	d017      	beq.n	8003480 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d123      	bne.n	80034d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	08da      	lsrs	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3208      	adds	r2, #8
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0203 	and.w	r2, r3, #3
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a2 	beq.w	800365a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <HAL_GPIO_Init+0x2e8>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a56      	ldr	r2, [pc, #344]	; (8003678 <HAL_GPIO_Init+0x2e8>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <HAL_GPIO_Init+0x2e8>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003532:	4a52      	ldr	r2, [pc, #328]	; (800367c <HAL_GPIO_Init+0x2ec>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a49      	ldr	r2, [pc, #292]	; (8003680 <HAL_GPIO_Init+0x2f0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d019      	beq.n	8003592 <HAL_GPIO_Init+0x202>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_GPIO_Init+0x2f4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_GPIO_Init+0x1fe>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_GPIO_Init+0x2f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00d      	beq.n	800358a <HAL_GPIO_Init+0x1fa>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a46      	ldr	r2, [pc, #280]	; (800368c <HAL_GPIO_Init+0x2fc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x1f6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a45      	ldr	r2, [pc, #276]	; (8003690 <HAL_GPIO_Init+0x300>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_GPIO_Init+0x1f2>
 800357e:	2304      	movs	r3, #4
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x204>
 8003582:	2307      	movs	r3, #7
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x204>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x204>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x204>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x204>
 8003592:	2300      	movs	r3, #0
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a4:	4935      	ldr	r1, [pc, #212]	; (800367c <HAL_GPIO_Init+0x2ec>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d6:	4a2f      	ldr	r2, [pc, #188]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_GPIO_Init+0x304>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003600:	4a24      	ldr	r2, [pc, #144]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <HAL_GPIO_Init+0x304>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b18      	ldr	r3, [pc, #96]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <HAL_GPIO_Init+0x304>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f aea2 	bls.w	80033ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40013800 	.word	0x40013800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	40020800 	.word	0x40020800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021000 	.word	0x40021000
 8003694:	40013c00 	.word	0x40013c00

08003698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e001      	b.n	80036ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
 80036d4:	4613      	mov	r3, r2
 80036d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d8:	787b      	ldrb	r3, [r7, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e4:	e003      	b.n	80036ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	041a      	lsls	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	619a      	str	r2, [r3, #24]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e264      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d075      	beq.n	8003806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b9d      	ldr	r3, [pc, #628]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b99      	ldr	r3, [pc, #612]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e23f      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x74>
 8003762:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a90      	ldr	r2, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x98>
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8a      	ldr	r2, [pc, #552]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003794:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a80      	ldr	r2, [pc, #512]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe fbe6 	bl	8001f84 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fe fbe2 	bl	8001f84 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e204      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe fbd2 	bl	8001f84 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe fbce 	bl	8001f84 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1f0      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	2b08      	cmp	r3, #8
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e1c4      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e03a      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fe fb87 	bl	8001f84 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387a:	f7fe fb83 	bl	8001f84 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1a5      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4940      	ldr	r1, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e015      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe fb66 	bl	8001f84 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fe fb62 	bl	8001f84 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e184      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fe fb46 	bl	8001f84 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fe fb42 	bl	8001f84 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e164      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x200>
 800391a:	e015      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fb2f 	bl	8001f84 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7fe fb2b 	bl	8001f84 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e14d      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a0 	beq.w	8003a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe faf1 	bl	8001f84 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e011      	b.n	80039ca <HAL_RCC_OscConfig+0x2ce>
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
 80039b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b8:	f7fe fae4 	bl	8001f84 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e106      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b85      	ldr	r3, [pc, #532]	; (8003be0 <HAL_RCC_OscConfig+0x4e4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x2f0>
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a80      	ldr	r2, [pc, #512]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x312>
 80039f4:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a7a      	ldr	r2, [pc, #488]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b78      	ldr	r3, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 8003a0e:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a74      	ldr	r2, [pc, #464]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fe faa9 	bl	8001f84 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe faa5 	bl	8001f84 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0c5      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x33a>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fa93 	bl	8001f84 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe fa8f 	bl	8001f84 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0af      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a55      	ldr	r2, [pc, #340]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 809b 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d05c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d141      	bne.n	8003b38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe fa63 	bl	8001f84 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe fa5f 	bl	8001f84 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e081      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	019b      	lsls	r3, r3, #6
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	3b01      	subs	r3, #1
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	4937      	ldr	r1, [pc, #220]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0a:	4b37      	ldr	r3, [pc, #220]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fe fa38 	bl	8001f84 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fe fa34 	bl	8001f84 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e056      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x41c>
 8003b36:	e04e      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe fa21 	bl	8001f84 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe fa1d 	bl	8001f84 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e03f      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x44a>
 8003b64:	e037      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e032      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCC_OscConfig+0x4e8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d028      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d11a      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d111      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40007000 	.word	0x40007000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470060 	.word	0x42470060

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe f952 	bl	8001f84 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fe f94e 	bl	8001f84 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe f8b2 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	08006570 	.word	0x08006570
 8003db0:	2000001c 	.word	0x2000001c
 8003db4:	20000020 	.word	0x20000020

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd0:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d00d      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	f200 80bd 	bhi.w	8003f5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dea:	e0b7      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003dee:	60bb      	str	r3, [r7, #8]
       break;
 8003df0:	e0b7      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df2:	4b61      	ldr	r3, [pc, #388]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003df4:	60bb      	str	r3, [r7, #8]
      break;
 8003df6:	e0b4      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e02:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04d      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0e:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	461a      	mov	r2, r3
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	ea02 0800 	and.w	r8, r2, r0
 8003e26:	ea03 0901 	and.w	r9, r3, r1
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	014b      	lsls	r3, r1, #5
 8003e38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e3c:	0142      	lsls	r2, r0, #5
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	ebb0 0008 	subs.w	r0, r0, r8
 8003e46:	eb61 0109 	sbc.w	r1, r1, r9
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	018b      	lsls	r3, r1, #6
 8003e54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e58:	0182      	lsls	r2, r0, #6
 8003e5a:	1a12      	subs	r2, r2, r0
 8003e5c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	00d9      	lsls	r1, r3, #3
 8003e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e6e:	00d0      	lsls	r0, r2, #3
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	eb12 0208 	adds.w	r2, r2, r8
 8003e78:	eb43 0309 	adc.w	r3, r3, r9
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	0259      	lsls	r1, r3, #9
 8003e86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003e8a:	0250      	lsls	r0, r2, #9
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	461a      	mov	r2, r3
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	f7fc ff78 	bl	8000d90 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e04a      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	ea02 0400 	and.w	r4, r2, r0
 8003ec2:	ea03 0501 	and.w	r5, r3, r1
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	014b      	lsls	r3, r1, #5
 8003ed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ed8:	0142      	lsls	r2, r0, #5
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	1b00      	subs	r0, r0, r4
 8003ee0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	018b      	lsls	r3, r1, #6
 8003eee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ef2:	0182      	lsls	r2, r0, #6
 8003ef4:	1a12      	subs	r2, r2, r0
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	f04f 0000 	mov.w	r0, #0
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	00d9      	lsls	r1, r3, #3
 8003f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f08:	00d0      	lsls	r0, r2, #3
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	1912      	adds	r2, r2, r4
 8003f10:	eb45 0303 	adc.w	r3, r5, r3
 8003f14:	f04f 0000 	mov.w	r0, #0
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	0299      	lsls	r1, r3, #10
 8003f1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f22:	0290      	lsls	r0, r2, #10
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	f7fc ff2c 	bl	8000d90 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60bb      	str	r3, [r7, #8]
      break;
 8003f5a:	e002      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f5e:	60bb      	str	r3, [r7, #8]
      break;
 8003f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f62:	68bb      	ldr	r3, [r7, #8]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	007a1200 	.word	0x007a1200

08003f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f82:	681b      	ldr	r3, [r3, #0]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	2000001c 	.word	0x2000001c

08003f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f98:	f7ff fff0 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4903      	ldr	r1, [pc, #12]	; (8003fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08006580 	.word	0x08006580

08003fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fc0:	f7ff ffdc 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	0b5b      	lsrs	r3, r3, #13
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4903      	ldr	r1, [pc, #12]	; (8003fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	08006580 	.word	0x08006580

08003fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07b      	b.n	80040ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004006:	d009      	beq.n	800401c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
 800400e:	e005      	b.n	800401c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fdda 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0104 	and.w	r1, r3, #4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f003 0210 	and.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_SPI_Transmit_IT+0x20>
 8004114:	2302      	movs	r3, #2
 8004116:	e06f      	b.n	80041f8 <HAL_SPI_Transmit_IT+0x100>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_Transmit_IT+0x34>
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004130:	e05d      	b.n	80041ee <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004142:	e054      	b.n	80041ee <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2203      	movs	r2, #3
 8004148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	88fa      	ldrh	r2, [r7, #6]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_SPI_Transmit_IT+0x10c>)
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
 800418a:	e002      	b.n	8004192 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_SPI_Transmit_IT+0x110>)
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419a:	d10f      	bne.n	80041bc <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80041ca:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d008      	beq.n	80041ec <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e000      	b.n	80041ee <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80041ec:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	0800448f 	.word	0x0800448f
 8004208:	08004449 	.word	0x08004449

0800420c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d004      	beq.n	8004250 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
    return;
 800424e:	e0d7      	b.n	8004400 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <HAL_SPI_IRQHandler+0x66>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	09db      	lsrs	r3, r3, #7
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
    return;
 8004270:	e0c6      	b.n	8004400 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_SPI_IRQHandler+0x8c>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80b4 	beq.w	8004400 <HAL_SPI_IRQHandler+0x1f4>
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80ad 	beq.w	8004400 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	099b      	lsrs	r3, r3, #6
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d023      	beq.n	80042fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d011      	beq.n	80042e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	e00b      	b.n	80042fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	693b      	ldr	r3, [r7, #16]
        return;
 80042f8:	e082      	b.n	8004400 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d014      	beq.n	8004330 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00c      	beq.n	8004356 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f043 0208 	orr.w	r2, r3, #8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004348:	2300      	movs	r3, #0
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04f      	beq.n	80043fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800436c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d104      	bne.n	800438a <HAL_SPI_IRQHandler+0x17e>
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d034      	beq.n	80043f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0203 	bic.w	r2, r2, #3
 8004398:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_SPI_IRQHandler+0x1fc>)
 80043a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fd62 	bl	8002e78 <HAL_DMA_Abort_IT>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <HAL_SPI_IRQHandler+0x1fc>)
 80043d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd4c 	bl	8002e78 <HAL_DMA_Abort_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80043f2:	e003      	b.n	80043fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f809 	bl	800440c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043fa:	e000      	b.n	80043fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80043fc:	bf00      	nop
    return;
 80043fe:	bf00      	nop
  }
}
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	08004421 	.word	0x08004421

0800440c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff ffe6 	bl	800440c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d102      	bne.n	8004486 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8f1 	bl	8004668 <SPI_CloseTx_ISR>
  }
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	881a      	ldrh	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8cf 	bl	8004668 <SPI_CloseTx_ISR>
  }
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044e4:	f7fd fd4e 	bl	8001f84 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4413      	add	r3, r2
 80044f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044f4:	f7fd fd46 	bl	8001f84 <HAL_GetTick>
 80044f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044fa:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	015b      	lsls	r3, r3, #5
 8004500:	0d1b      	lsrs	r3, r3, #20
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800450a:	e054      	b.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004512:	d050      	beq.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004514:	f7fd fd36 	bl	8001f84 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	429a      	cmp	r2, r3
 8004522:	d902      	bls.n	800452a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d13d      	bne.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004542:	d111      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454c:	d004      	beq.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004556:	d107      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d10f      	bne.n	8004592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e017      	b.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4013      	ands	r3, r2
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d19b      	bne.n	800450c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3720      	adds	r7, #32
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	2000001c 	.word	0x2000001c

080045e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <SPI_EndRxTxTransaction+0x7c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <SPI_EndRxTxTransaction+0x80>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0d5b      	lsrs	r3, r3, #21
 80045fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460e:	d112      	bne.n	8004636 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	2180      	movs	r1, #128	; 0x80
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff ff5a 	bl	80044d4 <SPI_WaitFlagStateUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e00f      	b.n	8004656 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	3b01      	subs	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d0f2      	beq.n	8004636 <SPI_EndRxTxTransaction+0x52>
 8004650:	e000      	b.n	8004654 <SPI_EndRxTxTransaction+0x70>
        break;
 8004652:	bf00      	nop
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	2000001c 	.word	0x2000001c
 8004664:	165e9f81 	.word	0x165e9f81

08004668 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004670:	4b2c      	ldr	r3, [pc, #176]	; (8004724 <SPI_CloseTx_ISR+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2c      	ldr	r2, [pc, #176]	; (8004728 <SPI_CloseTx_ISR+0xc0>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	0a5b      	lsrs	r3, r3, #9
 800467c:	2264      	movs	r2, #100	; 0x64
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004684:	f7fd fc7e 	bl	8001f84 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800469c:	e009      	b.n	80046b2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0eb      	beq.n	800468a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046c0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	2164      	movs	r1, #100	; 0x64
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ff8c 	bl	80045e4 <SPI_EndRxTxTransaction>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fe7d 	bl	800440c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004712:	e002      	b.n	800471a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fd f96f 	bl	80019f8 <HAL_SPI_TxCpltCallback>
}
 800471a:	bf00      	nop
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000001c 	.word	0x2000001c
 8004728:	057619f1 	.word	0x057619f1

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e041      	b.n	80047c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fa9c 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 fade 	bl	8004d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e03c      	b.n	800485e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_TIM_Base_Start+0xa0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d013      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <HAL_TIM_Base_Start+0xa4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a19      	ldr	r2, [pc, #100]	; (8004874 <HAL_TIM_Base_Start+0xa8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a17      	ldr	r2, [pc, #92]	; (8004878 <HAL_TIM_Base_Start+0xac>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_TIM_Base_Start+0x5c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_TIM_Base_Start+0xb0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b06      	cmp	r3, #6
 8004838:	d010      	beq.n	800485c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e007      	b.n	800485c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40014000 	.word	0x40014000

08004880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e044      	b.n	8004922 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <HAL_TIM_Base_Start_IT+0xb0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d018      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x6c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d013      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x6c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <HAL_TIM_Base_Start_IT+0xb4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x6c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_TIM_Base_Start_IT+0xb8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x6c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a17      	ldr	r2, [pc, #92]	; (800493c <HAL_TIM_Base_Start_IT+0xbc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x6c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a16      	ldr	r2, [pc, #88]	; (8004940 <HAL_TIM_Base_Start_IT+0xc0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d111      	bne.n	8004910 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d010      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	e007      	b.n	8004920 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800
 800493c:	40000c00 	.word	0x40000c00
 8004940:	40014000 	.word	0x40014000

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0202 	mvn.w	r2, #2
 8004970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9b2 	bl	8004cf0 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9a4 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f9b5 	bl	8004d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f988 	bl	8004cf0 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f97a 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f98b 	bl	8004d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0208 	mvn.w	r2, #8
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f95e 	bl	8004cf0 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f950 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f961 	bl	8004d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0210 	mvn.w	r2, #16
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2208      	movs	r2, #8
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f934 	bl	8004cf0 <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f926 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f937 	bl	8004d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0201 	mvn.w	r2, #1
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc ffae 	bl	8001a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 faae 	bl	8005050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8fc 	bl	8004d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d10e      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d107      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0220 	mvn.w	r2, #32
 8004b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa78 	bl	800503c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_ConfigClockSource+0x18>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0b3      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x180>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba4:	d03e      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xd0>
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004baa:	f200 8087 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	f000 8085 	beq.w	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d87f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bbc:	2b70      	cmp	r3, #112	; 0x70
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xa2>
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d87b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d050      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x116>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d877      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bcc:	2b50      	cmp	r3, #80	; 0x50
 8004bce:	d03c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xf6>
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d873      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d058      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x136>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d86f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bdc:	2b30      	cmp	r3, #48	; 0x30
 8004bde:	d064      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d86b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d060      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d867      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d05a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f000 f98b 	bl	8004f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e04e      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f000 f974 	bl	8004f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e03b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f8e8 	bl	8004e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	; 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f941 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c68:	e02b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 f907 	bl	8004e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2160      	movs	r1, #96	; 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f931 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004c88:	e01b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f8c8 	bl	8004e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2140      	movs	r1, #64	; 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f921 	bl	8004eea <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e00b      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 f918 	bl	8004eea <TIM_ITRx_SetConfig>
        break;
 8004cba:	e002      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <TIM_Base_SetConfig+0xe4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00f      	beq.n	8004d64 <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d00b      	beq.n	8004d64 <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a31      	ldr	r2, [pc, #196]	; (8004e14 <TIM_Base_SetConfig+0xe8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_Base_SetConfig+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <TIM_Base_SetConfig+0xec>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0x38>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <TIM_Base_SetConfig+0xf0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <TIM_Base_SetConfig+0xe4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01b      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d017      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <TIM_Base_SetConfig+0xe8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <TIM_Base_SetConfig+0xec>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00f      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <TIM_Base_SetConfig+0xf0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00b      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <TIM_Base_SetConfig+0xf4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d007      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <TIM_Base_SetConfig+0xf8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d003      	beq.n	8004db6 <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <TIM_Base_SetConfig+0xfc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d108      	bne.n	8004dc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <TIM_Base_SetConfig+0xe4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d103      	bne.n	8004dfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	615a      	str	r2, [r3, #20]
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0210 	bic.w	r2, r3, #16
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	031b      	lsls	r3, r3, #12
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f043 0307 	orr.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e050      	b.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc4:	d013      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a18      	ldr	r2, [pc, #96]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10c      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	40000c00 	.word	0x40000c00
 8005038:	40014000 	.word	0x40014000

0800503c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e03f      	b.n	80050f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fe3e 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2224      	movs	r2, #36	; 0x24
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f829 	bl	8005100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695a      	ldr	r2, [r3, #20]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b09f      	sub	sp, #124	; 0x7c
 8005106:	af00      	add	r7, sp, #0
 8005108:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	68d9      	ldr	r1, [r3, #12]
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	ea40 0301 	orr.w	r3, r0, r1
 8005120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	431a      	orrs	r2, r3
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	431a      	orrs	r2, r3
 8005132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4313      	orrs	r3, r2
 8005138:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800513a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005144:	f021 010c 	bic.w	r1, r1, #12
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800514e:	430b      	orrs	r3, r1
 8005150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	6999      	ldr	r1, [r3, #24]
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	ea40 0301 	orr.w	r3, r0, r1
 8005168:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800516a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4bc5      	ldr	r3, [pc, #788]	; (8005484 <UART_SetConfig+0x384>)
 8005170:	429a      	cmp	r2, r3
 8005172:	d004      	beq.n	800517e <UART_SetConfig+0x7e>
 8005174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4bc3      	ldr	r3, [pc, #780]	; (8005488 <UART_SetConfig+0x388>)
 800517a:	429a      	cmp	r2, r3
 800517c:	d103      	bne.n	8005186 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800517e:	f7fe ff1d 	bl	8003fbc <HAL_RCC_GetPCLK2Freq>
 8005182:	6778      	str	r0, [r7, #116]	; 0x74
 8005184:	e002      	b.n	800518c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005186:	f7fe ff05 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 800518a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005194:	f040 80b6 	bne.w	8005304 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800519a:	461c      	mov	r4, r3
 800519c:	f04f 0500 	mov.w	r5, #0
 80051a0:	4622      	mov	r2, r4
 80051a2:	462b      	mov	r3, r5
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	6439      	str	r1, [r7, #64]	; 0x40
 80051a8:	415b      	adcs	r3, r3
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
 80051ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051b0:	1912      	adds	r2, r2, r4
 80051b2:	eb45 0303 	adc.w	r3, r5, r3
 80051b6:	f04f 0000 	mov.w	r0, #0
 80051ba:	f04f 0100 	mov.w	r1, #0
 80051be:	00d9      	lsls	r1, r3, #3
 80051c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c4:	00d0      	lsls	r0, r2, #3
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	1911      	adds	r1, r2, r4
 80051cc:	6639      	str	r1, [r7, #96]	; 0x60
 80051ce:	416b      	adcs	r3, r5
 80051d0:	667b      	str	r3, [r7, #100]	; 0x64
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	1891      	adds	r1, r2, r2
 80051de:	63b9      	str	r1, [r7, #56]	; 0x38
 80051e0:	415b      	adcs	r3, r3
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80051ec:	f7fb fdd0 	bl	8000d90 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4ba5      	ldr	r3, [pc, #660]	; (800548c <UART_SetConfig+0x38c>)
 80051f6:	fba3 2302 	umull	r2, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	011e      	lsls	r6, r3, #4
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	461c      	mov	r4, r3
 8005202:	f04f 0500 	mov.w	r5, #0
 8005206:	4622      	mov	r2, r4
 8005208:	462b      	mov	r3, r5
 800520a:	1891      	adds	r1, r2, r2
 800520c:	6339      	str	r1, [r7, #48]	; 0x30
 800520e:	415b      	adcs	r3, r3
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005216:	1912      	adds	r2, r2, r4
 8005218:	eb45 0303 	adc.w	r3, r5, r3
 800521c:	f04f 0000 	mov.w	r0, #0
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	00d9      	lsls	r1, r3, #3
 8005226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800522a:	00d0      	lsls	r0, r2, #3
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	1911      	adds	r1, r2, r4
 8005232:	65b9      	str	r1, [r7, #88]	; 0x58
 8005234:	416b      	adcs	r3, r5
 8005236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	1891      	adds	r1, r2, r2
 8005244:	62b9      	str	r1, [r7, #40]	; 0x28
 8005246:	415b      	adcs	r3, r3
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800524e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005252:	f7fb fd9d 	bl	8000d90 <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4b8c      	ldr	r3, [pc, #560]	; (800548c <UART_SetConfig+0x38c>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	; 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	3332      	adds	r3, #50	; 0x32
 800526e:	4a87      	ldr	r2, [pc, #540]	; (800548c <UART_SetConfig+0x38c>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800527c:	441e      	add	r6, r3
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	4618      	mov	r0, r3
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	1894      	adds	r4, r2, r2
 800528c:	623c      	str	r4, [r7, #32]
 800528e:	415b      	adcs	r3, r3
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005296:	1812      	adds	r2, r2, r0
 8005298:	eb41 0303 	adc.w	r3, r1, r3
 800529c:	f04f 0400 	mov.w	r4, #0
 80052a0:	f04f 0500 	mov.w	r5, #0
 80052a4:	00dd      	lsls	r5, r3, #3
 80052a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052aa:	00d4      	lsls	r4, r2, #3
 80052ac:	4622      	mov	r2, r4
 80052ae:	462b      	mov	r3, r5
 80052b0:	1814      	adds	r4, r2, r0
 80052b2:	653c      	str	r4, [r7, #80]	; 0x50
 80052b4:	414b      	adcs	r3, r1
 80052b6:	657b      	str	r3, [r7, #84]	; 0x54
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	461a      	mov	r2, r3
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	1891      	adds	r1, r2, r2
 80052c4:	61b9      	str	r1, [r7, #24]
 80052c6:	415b      	adcs	r3, r3
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052d2:	f7fb fd5d 	bl	8000d90 <__aeabi_uldivmod>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4b6c      	ldr	r3, [pc, #432]	; (800548c <UART_SetConfig+0x38c>)
 80052dc:	fba3 1302 	umull	r1, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2164      	movs	r1, #100	; 0x64
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3332      	adds	r3, #50	; 0x32
 80052ee:	4a67      	ldr	r2, [pc, #412]	; (800548c <UART_SetConfig+0x38c>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f003 0207 	and.w	r2, r3, #7
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4432      	add	r2, r6
 8005300:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005302:	e0b9      	b.n	8005478 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005306:	461c      	mov	r4, r3
 8005308:	f04f 0500 	mov.w	r5, #0
 800530c:	4622      	mov	r2, r4
 800530e:	462b      	mov	r3, r5
 8005310:	1891      	adds	r1, r2, r2
 8005312:	6139      	str	r1, [r7, #16]
 8005314:	415b      	adcs	r3, r3
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800531c:	1912      	adds	r2, r2, r4
 800531e:	eb45 0303 	adc.w	r3, r5, r3
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	00d9      	lsls	r1, r3, #3
 800532c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005330:	00d0      	lsls	r0, r2, #3
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	eb12 0804 	adds.w	r8, r2, r4
 800533a:	eb43 0905 	adc.w	r9, r3, r5
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	4618      	mov	r0, r3
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	008b      	lsls	r3, r1, #2
 8005352:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005356:	0082      	lsls	r2, r0, #2
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb fd18 	bl	8000d90 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4b49      	ldr	r3, [pc, #292]	; (800548c <UART_SetConfig+0x38c>)
 8005366:	fba3 2302 	umull	r2, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	011e      	lsls	r6, r3, #4
 800536e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005370:	4618      	mov	r0, r3
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	1894      	adds	r4, r2, r2
 800537c:	60bc      	str	r4, [r7, #8]
 800537e:	415b      	adcs	r3, r3
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005386:	1812      	adds	r2, r2, r0
 8005388:	eb41 0303 	adc.w	r3, r1, r3
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	f04f 0500 	mov.w	r5, #0
 8005394:	00dd      	lsls	r5, r3, #3
 8005396:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800539a:	00d4      	lsls	r4, r2, #3
 800539c:	4622      	mov	r2, r4
 800539e:	462b      	mov	r3, r5
 80053a0:	1814      	adds	r4, r2, r0
 80053a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80053a4:	414b      	adcs	r3, r1
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	008b      	lsls	r3, r1, #2
 80053bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053c0:	0082      	lsls	r2, r0, #2
 80053c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053c6:	f7fb fce3 	bl	8000d90 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b2f      	ldr	r3, [pc, #188]	; (800548c <UART_SetConfig+0x38c>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	; 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	3332      	adds	r3, #50	; 0x32
 80053e2:	4a2a      	ldr	r2, [pc, #168]	; (800548c <UART_SetConfig+0x38c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ee:	441e      	add	r6, r3
 80053f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f2:	4618      	mov	r0, r3
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	1894      	adds	r4, r2, r2
 80053fe:	603c      	str	r4, [r7, #0]
 8005400:	415b      	adcs	r3, r3
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005408:	1812      	adds	r2, r2, r0
 800540a:	eb41 0303 	adc.w	r3, r1, r3
 800540e:	f04f 0400 	mov.w	r4, #0
 8005412:	f04f 0500 	mov.w	r5, #0
 8005416:	00dd      	lsls	r5, r3, #3
 8005418:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800541c:	00d4      	lsls	r4, r2, #3
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	eb12 0a00 	adds.w	sl, r2, r0
 8005426:	eb43 0b01 	adc.w	fp, r3, r1
 800542a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	008b      	lsls	r3, r1, #2
 800543e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005442:	0082      	lsls	r2, r0, #2
 8005444:	4650      	mov	r0, sl
 8005446:	4659      	mov	r1, fp
 8005448:	f7fb fca2 	bl	8000d90 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <UART_SetConfig+0x38c>)
 8005452:	fba3 1302 	umull	r1, r3, r3, r2
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2164      	movs	r1, #100	; 0x64
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	3332      	adds	r3, #50	; 0x32
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <UART_SetConfig+0x38c>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	f003 020f 	and.w	r2, r3, #15
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4432      	add	r2, r6
 8005476:	609a      	str	r2, [r3, #8]
}
 8005478:	bf00      	nop
 800547a:	377c      	adds	r7, #124	; 0x7c
 800547c:	46bd      	mov	sp, r7
 800547e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005482:	bf00      	nop
 8005484:	40011000 	.word	0x40011000
 8005488:	40011400 	.word	0x40011400
 800548c:	51eb851f 	.word	0x51eb851f

08005490 <__libc_init_array>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	4d0d      	ldr	r5, [pc, #52]	; (80054c8 <__libc_init_array+0x38>)
 8005494:	4c0d      	ldr	r4, [pc, #52]	; (80054cc <__libc_init_array+0x3c>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	2600      	movs	r6, #0
 800549c:	42a6      	cmp	r6, r4
 800549e:	d109      	bne.n	80054b4 <__libc_init_array+0x24>
 80054a0:	4d0b      	ldr	r5, [pc, #44]	; (80054d0 <__libc_init_array+0x40>)
 80054a2:	4c0c      	ldr	r4, [pc, #48]	; (80054d4 <__libc_init_array+0x44>)
 80054a4:	f001 f856 	bl	8006554 <_init>
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	2600      	movs	r6, #0
 80054ae:	42a6      	cmp	r6, r4
 80054b0:	d105      	bne.n	80054be <__libc_init_array+0x2e>
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b8:	4798      	blx	r3
 80054ba:	3601      	adds	r6, #1
 80054bc:	e7ee      	b.n	800549c <__libc_init_array+0xc>
 80054be:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c2:	4798      	blx	r3
 80054c4:	3601      	adds	r6, #1
 80054c6:	e7f2      	b.n	80054ae <__libc_init_array+0x1e>
 80054c8:	08006770 	.word	0x08006770
 80054cc:	08006770 	.word	0x08006770
 80054d0:	08006770 	.word	0x08006770
 80054d4:	08006774 	.word	0x08006774

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <sin>:
 80054e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054ea:	ec53 2b10 	vmov	r2, r3, d0
 80054ee:	4826      	ldr	r0, [pc, #152]	; (8005588 <sin+0xa0>)
 80054f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80054f4:	4281      	cmp	r1, r0
 80054f6:	dc07      	bgt.n	8005508 <sin+0x20>
 80054f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005580 <sin+0x98>
 80054fc:	2000      	movs	r0, #0
 80054fe:	f000 fe5b 	bl	80061b8 <__kernel_sin>
 8005502:	ec51 0b10 	vmov	r0, r1, d0
 8005506:	e007      	b.n	8005518 <sin+0x30>
 8005508:	4820      	ldr	r0, [pc, #128]	; (800558c <sin+0xa4>)
 800550a:	4281      	cmp	r1, r0
 800550c:	dd09      	ble.n	8005522 <sin+0x3a>
 800550e:	ee10 0a10 	vmov	r0, s0
 8005512:	4619      	mov	r1, r3
 8005514:	f7fa fe64 	bl	80001e0 <__aeabi_dsub>
 8005518:	ec41 0b10 	vmov	d0, r0, r1
 800551c:	b005      	add	sp, #20
 800551e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005522:	4668      	mov	r0, sp
 8005524:	f000 f834 	bl	8005590 <__ieee754_rem_pio2>
 8005528:	f000 0003 	and.w	r0, r0, #3
 800552c:	2801      	cmp	r0, #1
 800552e:	d008      	beq.n	8005542 <sin+0x5a>
 8005530:	2802      	cmp	r0, #2
 8005532:	d00d      	beq.n	8005550 <sin+0x68>
 8005534:	b9d0      	cbnz	r0, 800556c <sin+0x84>
 8005536:	ed9d 1b02 	vldr	d1, [sp, #8]
 800553a:	ed9d 0b00 	vldr	d0, [sp]
 800553e:	2001      	movs	r0, #1
 8005540:	e7dd      	b.n	80054fe <sin+0x16>
 8005542:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005546:	ed9d 0b00 	vldr	d0, [sp]
 800554a:	f000 fa2d 	bl	80059a8 <__kernel_cos>
 800554e:	e7d8      	b.n	8005502 <sin+0x1a>
 8005550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005554:	ed9d 0b00 	vldr	d0, [sp]
 8005558:	2001      	movs	r0, #1
 800555a:	f000 fe2d 	bl	80061b8 <__kernel_sin>
 800555e:	ec53 2b10 	vmov	r2, r3, d0
 8005562:	ee10 0a10 	vmov	r0, s0
 8005566:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800556a:	e7d5      	b.n	8005518 <sin+0x30>
 800556c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005570:	ed9d 0b00 	vldr	d0, [sp]
 8005574:	f000 fa18 	bl	80059a8 <__kernel_cos>
 8005578:	e7f1      	b.n	800555e <sin+0x76>
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w
	...
 8005588:	3fe921fb 	.word	0x3fe921fb
 800558c:	7fefffff 	.word	0x7fefffff

08005590 <__ieee754_rem_pio2>:
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	ed2d 8b02 	vpush	{d8}
 8005598:	ec55 4b10 	vmov	r4, r5, d0
 800559c:	4bca      	ldr	r3, [pc, #808]	; (80058c8 <__ieee754_rem_pio2+0x338>)
 800559e:	b08b      	sub	sp, #44	; 0x2c
 80055a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80055a4:	4598      	cmp	r8, r3
 80055a6:	4682      	mov	sl, r0
 80055a8:	9502      	str	r5, [sp, #8]
 80055aa:	dc08      	bgt.n	80055be <__ieee754_rem_pio2+0x2e>
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	ed80 0b00 	vstr	d0, [r0]
 80055b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80055b8:	f04f 0b00 	mov.w	fp, #0
 80055bc:	e028      	b.n	8005610 <__ieee754_rem_pio2+0x80>
 80055be:	4bc3      	ldr	r3, [pc, #780]	; (80058cc <__ieee754_rem_pio2+0x33c>)
 80055c0:	4598      	cmp	r8, r3
 80055c2:	dc78      	bgt.n	80056b6 <__ieee754_rem_pio2+0x126>
 80055c4:	9b02      	ldr	r3, [sp, #8]
 80055c6:	4ec2      	ldr	r6, [pc, #776]	; (80058d0 <__ieee754_rem_pio2+0x340>)
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	ee10 0a10 	vmov	r0, s0
 80055ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8005890 <__ieee754_rem_pio2+0x300>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	4629      	mov	r1, r5
 80055d6:	dd39      	ble.n	800564c <__ieee754_rem_pio2+0xbc>
 80055d8:	f7fa fe02 	bl	80001e0 <__aeabi_dsub>
 80055dc:	45b0      	cmp	r8, r6
 80055de:	4604      	mov	r4, r0
 80055e0:	460d      	mov	r5, r1
 80055e2:	d01b      	beq.n	800561c <__ieee754_rem_pio2+0x8c>
 80055e4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005898 <__ieee754_rem_pio2+0x308>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa fdf9 	bl	80001e0 <__aeabi_dsub>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	e9ca 2300 	strd	r2, r3, [sl]
 80055f6:	4620      	mov	r0, r4
 80055f8:	4629      	mov	r1, r5
 80055fa:	f7fa fdf1 	bl	80001e0 <__aeabi_dsub>
 80055fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8005898 <__ieee754_rem_pio2+0x308>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fa fdec 	bl	80001e0 <__aeabi_dsub>
 8005608:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800560c:	f04f 0b01 	mov.w	fp, #1
 8005610:	4658      	mov	r0, fp
 8005612:	b00b      	add	sp, #44	; 0x2c
 8005614:	ecbd 8b02 	vpop	{d8}
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561c:	a3a0      	add	r3, pc, #640	; (adr r3, 80058a0 <__ieee754_rem_pio2+0x310>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fddd 	bl	80001e0 <__aeabi_dsub>
 8005626:	a3a0      	add	r3, pc, #640	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x318>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	4604      	mov	r4, r0
 800562e:	460d      	mov	r5, r1
 8005630:	f7fa fdd6 	bl	80001e0 <__aeabi_dsub>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	e9ca 2300 	strd	r2, r3, [sl]
 800563c:	4620      	mov	r0, r4
 800563e:	4629      	mov	r1, r5
 8005640:	f7fa fdce 	bl	80001e0 <__aeabi_dsub>
 8005644:	a398      	add	r3, pc, #608	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x318>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	e7db      	b.n	8005604 <__ieee754_rem_pio2+0x74>
 800564c:	f7fa fdca 	bl	80001e4 <__adddf3>
 8005650:	45b0      	cmp	r8, r6
 8005652:	4604      	mov	r4, r0
 8005654:	460d      	mov	r5, r1
 8005656:	d016      	beq.n	8005686 <__ieee754_rem_pio2+0xf6>
 8005658:	a38f      	add	r3, pc, #572	; (adr r3, 8005898 <__ieee754_rem_pio2+0x308>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa fdc1 	bl	80001e4 <__adddf3>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	e9ca 2300 	strd	r2, r3, [sl]
 800566a:	4620      	mov	r0, r4
 800566c:	4629      	mov	r1, r5
 800566e:	f7fa fdb7 	bl	80001e0 <__aeabi_dsub>
 8005672:	a389      	add	r3, pc, #548	; (adr r3, 8005898 <__ieee754_rem_pio2+0x308>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f7fa fdb4 	bl	80001e4 <__adddf3>
 800567c:	f04f 3bff 	mov.w	fp, #4294967295
 8005680:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005684:	e7c4      	b.n	8005610 <__ieee754_rem_pio2+0x80>
 8005686:	a386      	add	r3, pc, #536	; (adr r3, 80058a0 <__ieee754_rem_pio2+0x310>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f7fa fdaa 	bl	80001e4 <__adddf3>
 8005690:	a385      	add	r3, pc, #532	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x318>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	4604      	mov	r4, r0
 8005698:	460d      	mov	r5, r1
 800569a:	f7fa fda3 	bl	80001e4 <__adddf3>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	e9ca 2300 	strd	r2, r3, [sl]
 80056a6:	4620      	mov	r0, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	f7fa fd99 	bl	80001e0 <__aeabi_dsub>
 80056ae:	a37e      	add	r3, pc, #504	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x318>)
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	e7e0      	b.n	8005678 <__ieee754_rem_pio2+0xe8>
 80056b6:	4b87      	ldr	r3, [pc, #540]	; (80058d4 <__ieee754_rem_pio2+0x344>)
 80056b8:	4598      	cmp	r8, r3
 80056ba:	f300 80d9 	bgt.w	8005870 <__ieee754_rem_pio2+0x2e0>
 80056be:	f000 fe39 	bl	8006334 <fabs>
 80056c2:	ec55 4b10 	vmov	r4, r5, d0
 80056c6:	ee10 0a10 	vmov	r0, s0
 80056ca:	a379      	add	r3, pc, #484	; (adr r3, 80058b0 <__ieee754_rem_pio2+0x320>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	4629      	mov	r1, r5
 80056d2:	f7fa ff3d 	bl	8000550 <__aeabi_dmul>
 80056d6:	4b80      	ldr	r3, [pc, #512]	; (80058d8 <__ieee754_rem_pio2+0x348>)
 80056d8:	2200      	movs	r2, #0
 80056da:	f7fa fd83 	bl	80001e4 <__adddf3>
 80056de:	f7fb f9d1 	bl	8000a84 <__aeabi_d2iz>
 80056e2:	4683      	mov	fp, r0
 80056e4:	f7fa feca 	bl	800047c <__aeabi_i2d>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	ec43 2b18 	vmov	d8, r2, r3
 80056f0:	a367      	add	r3, pc, #412	; (adr r3, 8005890 <__ieee754_rem_pio2+0x300>)
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	f7fa ff2b 	bl	8000550 <__aeabi_dmul>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fa fd6d 	bl	80001e0 <__aeabi_dsub>
 8005706:	a364      	add	r3, pc, #400	; (adr r3, 8005898 <__ieee754_rem_pio2+0x308>)
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	ec51 0b18 	vmov	r0, r1, d8
 8005714:	f7fa ff1c 	bl	8000550 <__aeabi_dmul>
 8005718:	f1bb 0f1f 	cmp.w	fp, #31
 800571c:	4604      	mov	r4, r0
 800571e:	460d      	mov	r5, r1
 8005720:	dc0d      	bgt.n	800573e <__ieee754_rem_pio2+0x1ae>
 8005722:	4b6e      	ldr	r3, [pc, #440]	; (80058dc <__ieee754_rem_pio2+0x34c>)
 8005724:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	4543      	cmp	r3, r8
 800572e:	d006      	beq.n	800573e <__ieee754_rem_pio2+0x1ae>
 8005730:	4622      	mov	r2, r4
 8005732:	462b      	mov	r3, r5
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa fd52 	bl	80001e0 <__aeabi_dsub>
 800573c:	e00f      	b.n	800575e <__ieee754_rem_pio2+0x1ce>
 800573e:	462b      	mov	r3, r5
 8005740:	4622      	mov	r2, r4
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	f7fa fd4b 	bl	80001e0 <__aeabi_dsub>
 800574a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005754:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005758:	f1b8 0f10 	cmp.w	r8, #16
 800575c:	dc02      	bgt.n	8005764 <__ieee754_rem_pio2+0x1d4>
 800575e:	e9ca 0100 	strd	r0, r1, [sl]
 8005762:	e039      	b.n	80057d8 <__ieee754_rem_pio2+0x248>
 8005764:	a34e      	add	r3, pc, #312	; (adr r3, 80058a0 <__ieee754_rem_pio2+0x310>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	ec51 0b18 	vmov	r0, r1, d8
 800576e:	f7fa feef 	bl	8000550 <__aeabi_dmul>
 8005772:	4604      	mov	r4, r0
 8005774:	460d      	mov	r5, r1
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4630      	mov	r0, r6
 800577c:	4639      	mov	r1, r7
 800577e:	f7fa fd2f 	bl	80001e0 <__aeabi_dsub>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4680      	mov	r8, r0
 8005788:	4689      	mov	r9, r1
 800578a:	4630      	mov	r0, r6
 800578c:	4639      	mov	r1, r7
 800578e:	f7fa fd27 	bl	80001e0 <__aeabi_dsub>
 8005792:	4622      	mov	r2, r4
 8005794:	462b      	mov	r3, r5
 8005796:	f7fa fd23 	bl	80001e0 <__aeabi_dsub>
 800579a:	a343      	add	r3, pc, #268	; (adr r3, 80058a8 <__ieee754_rem_pio2+0x318>)
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	4604      	mov	r4, r0
 80057a2:	460d      	mov	r5, r1
 80057a4:	ec51 0b18 	vmov	r0, r1, d8
 80057a8:	f7fa fed2 	bl	8000550 <__aeabi_dmul>
 80057ac:	4622      	mov	r2, r4
 80057ae:	462b      	mov	r3, r5
 80057b0:	f7fa fd16 	bl	80001e0 <__aeabi_dsub>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4604      	mov	r4, r0
 80057ba:	460d      	mov	r5, r1
 80057bc:	4640      	mov	r0, r8
 80057be:	4649      	mov	r1, r9
 80057c0:	f7fa fd0e 	bl	80001e0 <__aeabi_dsub>
 80057c4:	9a03      	ldr	r2, [sp, #12]
 80057c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b31      	cmp	r3, #49	; 0x31
 80057ce:	dc24      	bgt.n	800581a <__ieee754_rem_pio2+0x28a>
 80057d0:	e9ca 0100 	strd	r0, r1, [sl]
 80057d4:	4646      	mov	r6, r8
 80057d6:	464f      	mov	r7, r9
 80057d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80057dc:	4630      	mov	r0, r6
 80057de:	4642      	mov	r2, r8
 80057e0:	464b      	mov	r3, r9
 80057e2:	4639      	mov	r1, r7
 80057e4:	f7fa fcfc 	bl	80001e0 <__aeabi_dsub>
 80057e8:	462b      	mov	r3, r5
 80057ea:	4622      	mov	r2, r4
 80057ec:	f7fa fcf8 	bl	80001e0 <__aeabi_dsub>
 80057f0:	9b02      	ldr	r3, [sp, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80057f8:	f6bf af0a 	bge.w	8005610 <__ieee754_rem_pio2+0x80>
 80057fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005800:	f8ca 3004 	str.w	r3, [sl, #4]
 8005804:	f8ca 8000 	str.w	r8, [sl]
 8005808:	f8ca 0008 	str.w	r0, [sl, #8]
 800580c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005810:	f8ca 300c 	str.w	r3, [sl, #12]
 8005814:	f1cb 0b00 	rsb	fp, fp, #0
 8005818:	e6fa      	b.n	8005610 <__ieee754_rem_pio2+0x80>
 800581a:	a327      	add	r3, pc, #156	; (adr r3, 80058b8 <__ieee754_rem_pio2+0x328>)
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	ec51 0b18 	vmov	r0, r1, d8
 8005824:	f7fa fe94 	bl	8000550 <__aeabi_dmul>
 8005828:	4604      	mov	r4, r0
 800582a:	460d      	mov	r5, r1
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4640      	mov	r0, r8
 8005832:	4649      	mov	r1, r9
 8005834:	f7fa fcd4 	bl	80001e0 <__aeabi_dsub>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4606      	mov	r6, r0
 800583e:	460f      	mov	r7, r1
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	f7fa fccc 	bl	80001e0 <__aeabi_dsub>
 8005848:	4622      	mov	r2, r4
 800584a:	462b      	mov	r3, r5
 800584c:	f7fa fcc8 	bl	80001e0 <__aeabi_dsub>
 8005850:	a31b      	add	r3, pc, #108	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x330>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	4604      	mov	r4, r0
 8005858:	460d      	mov	r5, r1
 800585a:	ec51 0b18 	vmov	r0, r1, d8
 800585e:	f7fa fe77 	bl	8000550 <__aeabi_dmul>
 8005862:	4622      	mov	r2, r4
 8005864:	462b      	mov	r3, r5
 8005866:	f7fa fcbb 	bl	80001e0 <__aeabi_dsub>
 800586a:	4604      	mov	r4, r0
 800586c:	460d      	mov	r5, r1
 800586e:	e75f      	b.n	8005730 <__ieee754_rem_pio2+0x1a0>
 8005870:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <__ieee754_rem_pio2+0x350>)
 8005872:	4598      	cmp	r8, r3
 8005874:	dd36      	ble.n	80058e4 <__ieee754_rem_pio2+0x354>
 8005876:	ee10 2a10 	vmov	r2, s0
 800587a:	462b      	mov	r3, r5
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fcae 	bl	80001e0 <__aeabi_dsub>
 8005884:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005888:	e9ca 0100 	strd	r0, r1, [sl]
 800588c:	e694      	b.n	80055b8 <__ieee754_rem_pio2+0x28>
 800588e:	bf00      	nop
 8005890:	54400000 	.word	0x54400000
 8005894:	3ff921fb 	.word	0x3ff921fb
 8005898:	1a626331 	.word	0x1a626331
 800589c:	3dd0b461 	.word	0x3dd0b461
 80058a0:	1a600000 	.word	0x1a600000
 80058a4:	3dd0b461 	.word	0x3dd0b461
 80058a8:	2e037073 	.word	0x2e037073
 80058ac:	3ba3198a 	.word	0x3ba3198a
 80058b0:	6dc9c883 	.word	0x6dc9c883
 80058b4:	3fe45f30 	.word	0x3fe45f30
 80058b8:	2e000000 	.word	0x2e000000
 80058bc:	3ba3198a 	.word	0x3ba3198a
 80058c0:	252049c1 	.word	0x252049c1
 80058c4:	397b839a 	.word	0x397b839a
 80058c8:	3fe921fb 	.word	0x3fe921fb
 80058cc:	4002d97b 	.word	0x4002d97b
 80058d0:	3ff921fb 	.word	0x3ff921fb
 80058d4:	413921fb 	.word	0x413921fb
 80058d8:	3fe00000 	.word	0x3fe00000
 80058dc:	08006590 	.word	0x08006590
 80058e0:	7fefffff 	.word	0x7fefffff
 80058e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80058e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80058ec:	ee10 0a10 	vmov	r0, s0
 80058f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80058f4:	ee10 6a10 	vmov	r6, s0
 80058f8:	460f      	mov	r7, r1
 80058fa:	f7fb f8c3 	bl	8000a84 <__aeabi_d2iz>
 80058fe:	f7fa fdbd 	bl	800047c <__aeabi_i2d>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4630      	mov	r0, r6
 8005908:	4639      	mov	r1, r7
 800590a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800590e:	f7fa fc67 	bl	80001e0 <__aeabi_dsub>
 8005912:	4b22      	ldr	r3, [pc, #136]	; (800599c <__ieee754_rem_pio2+0x40c>)
 8005914:	2200      	movs	r2, #0
 8005916:	f7fa fe1b 	bl	8000550 <__aeabi_dmul>
 800591a:	460f      	mov	r7, r1
 800591c:	4606      	mov	r6, r0
 800591e:	f7fb f8b1 	bl	8000a84 <__aeabi_d2iz>
 8005922:	f7fa fdab 	bl	800047c <__aeabi_i2d>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005932:	f7fa fc55 	bl	80001e0 <__aeabi_dsub>
 8005936:	4b19      	ldr	r3, [pc, #100]	; (800599c <__ieee754_rem_pio2+0x40c>)
 8005938:	2200      	movs	r2, #0
 800593a:	f7fa fe09 	bl	8000550 <__aeabi_dmul>
 800593e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005942:	ad04      	add	r5, sp, #16
 8005944:	f04f 0803 	mov.w	r8, #3
 8005948:	46a9      	mov	r9, r5
 800594a:	2600      	movs	r6, #0
 800594c:	2700      	movs	r7, #0
 800594e:	4632      	mov	r2, r6
 8005950:	463b      	mov	r3, r7
 8005952:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005956:	46c3      	mov	fp, r8
 8005958:	3d08      	subs	r5, #8
 800595a:	f108 38ff 	add.w	r8, r8, #4294967295
 800595e:	f7fb f85f 	bl	8000a20 <__aeabi_dcmpeq>
 8005962:	2800      	cmp	r0, #0
 8005964:	d1f3      	bne.n	800594e <__ieee754_rem_pio2+0x3be>
 8005966:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <__ieee754_rem_pio2+0x410>)
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	2302      	movs	r3, #2
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	4622      	mov	r2, r4
 8005970:	465b      	mov	r3, fp
 8005972:	4651      	mov	r1, sl
 8005974:	4648      	mov	r0, r9
 8005976:	f000 f8df 	bl	8005b38 <__kernel_rem_pio2>
 800597a:	9b02      	ldr	r3, [sp, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	4683      	mov	fp, r0
 8005980:	f6bf ae46 	bge.w	8005610 <__ieee754_rem_pio2+0x80>
 8005984:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005988:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800598c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005990:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005994:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005998:	e73a      	b.n	8005810 <__ieee754_rem_pio2+0x280>
 800599a:	bf00      	nop
 800599c:	41700000 	.word	0x41700000
 80059a0:	08006610 	.word	0x08006610
 80059a4:	00000000 	.word	0x00000000

080059a8 <__kernel_cos>:
 80059a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	ec57 6b10 	vmov	r6, r7, d0
 80059b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80059b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80059b8:	ed8d 1b00 	vstr	d1, [sp]
 80059bc:	da07      	bge.n	80059ce <__kernel_cos+0x26>
 80059be:	ee10 0a10 	vmov	r0, s0
 80059c2:	4639      	mov	r1, r7
 80059c4:	f7fb f85e 	bl	8000a84 <__aeabi_d2iz>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f000 8088 	beq.w	8005ade <__kernel_cos+0x136>
 80059ce:	4632      	mov	r2, r6
 80059d0:	463b      	mov	r3, r7
 80059d2:	4630      	mov	r0, r6
 80059d4:	4639      	mov	r1, r7
 80059d6:	f7fa fdbb 	bl	8000550 <__aeabi_dmul>
 80059da:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <__kernel_cos+0x178>)
 80059dc:	2200      	movs	r2, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	460d      	mov	r5, r1
 80059e2:	f7fa fdb5 	bl	8000550 <__aeabi_dmul>
 80059e6:	a340      	add	r3, pc, #256	; (adr r3, 8005ae8 <__kernel_cos+0x140>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	4682      	mov	sl, r0
 80059ee:	468b      	mov	fp, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa fdac 	bl	8000550 <__aeabi_dmul>
 80059f8:	a33d      	add	r3, pc, #244	; (adr r3, 8005af0 <__kernel_cos+0x148>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fbf1 	bl	80001e4 <__adddf3>
 8005a02:	4622      	mov	r2, r4
 8005a04:	462b      	mov	r3, r5
 8005a06:	f7fa fda3 	bl	8000550 <__aeabi_dmul>
 8005a0a:	a33b      	add	r3, pc, #236	; (adr r3, 8005af8 <__kernel_cos+0x150>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f7fa fbe6 	bl	80001e0 <__aeabi_dsub>
 8005a14:	4622      	mov	r2, r4
 8005a16:	462b      	mov	r3, r5
 8005a18:	f7fa fd9a 	bl	8000550 <__aeabi_dmul>
 8005a1c:	a338      	add	r3, pc, #224	; (adr r3, 8005b00 <__kernel_cos+0x158>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f7fa fbdf 	bl	80001e4 <__adddf3>
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	f7fa fd91 	bl	8000550 <__aeabi_dmul>
 8005a2e:	a336      	add	r3, pc, #216	; (adr r3, 8005b08 <__kernel_cos+0x160>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fbd4 	bl	80001e0 <__aeabi_dsub>
 8005a38:	4622      	mov	r2, r4
 8005a3a:	462b      	mov	r3, r5
 8005a3c:	f7fa fd88 	bl	8000550 <__aeabi_dmul>
 8005a40:	a333      	add	r3, pc, #204	; (adr r3, 8005b10 <__kernel_cos+0x168>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f7fa fbcd 	bl	80001e4 <__adddf3>
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	f7fa fd7f 	bl	8000550 <__aeabi_dmul>
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f7fa fd7b 	bl	8000550 <__aeabi_dmul>
 8005a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a5e:	4604      	mov	r4, r0
 8005a60:	460d      	mov	r5, r1
 8005a62:	4630      	mov	r0, r6
 8005a64:	4639      	mov	r1, r7
 8005a66:	f7fa fd73 	bl	8000550 <__aeabi_dmul>
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7fa fbb5 	bl	80001e0 <__aeabi_dsub>
 8005a76:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <__kernel_cos+0x17c>)
 8005a78:	4598      	cmp	r8, r3
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	dc10      	bgt.n	8005aa2 <__kernel_cos+0xfa>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4650      	mov	r0, sl
 8005a86:	4659      	mov	r1, fp
 8005a88:	f7fa fbaa 	bl	80001e0 <__aeabi_dsub>
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4926      	ldr	r1, [pc, #152]	; (8005b28 <__kernel_cos+0x180>)
 8005a90:	4602      	mov	r2, r0
 8005a92:	2000      	movs	r0, #0
 8005a94:	f7fa fba4 	bl	80001e0 <__aeabi_dsub>
 8005a98:	ec41 0b10 	vmov	d0, r0, r1
 8005a9c:	b003      	add	sp, #12
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa2:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <__kernel_cos+0x184>)
 8005aa4:	4920      	ldr	r1, [pc, #128]	; (8005b28 <__kernel_cos+0x180>)
 8005aa6:	4598      	cmp	r8, r3
 8005aa8:	bfcc      	ite	gt
 8005aaa:	4d21      	ldrgt	r5, [pc, #132]	; (8005b30 <__kernel_cos+0x188>)
 8005aac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005ab0:	2400      	movs	r4, #0
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f7fa fb92 	bl	80001e0 <__aeabi_dsub>
 8005abc:	4622      	mov	r2, r4
 8005abe:	4680      	mov	r8, r0
 8005ac0:	4689      	mov	r9, r1
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	f7fa fb8a 	bl	80001e0 <__aeabi_dsub>
 8005acc:	4632      	mov	r2, r6
 8005ace:	463b      	mov	r3, r7
 8005ad0:	f7fa fb86 	bl	80001e0 <__aeabi_dsub>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4640      	mov	r0, r8
 8005ada:	4649      	mov	r1, r9
 8005adc:	e7da      	b.n	8005a94 <__kernel_cos+0xec>
 8005ade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005b18 <__kernel_cos+0x170>
 8005ae2:	e7db      	b.n	8005a9c <__kernel_cos+0xf4>
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	be8838d4 	.word	0xbe8838d4
 8005aec:	bda8fae9 	.word	0xbda8fae9
 8005af0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005af4:	3e21ee9e 	.word	0x3e21ee9e
 8005af8:	809c52ad 	.word	0x809c52ad
 8005afc:	3e927e4f 	.word	0x3e927e4f
 8005b00:	19cb1590 	.word	0x19cb1590
 8005b04:	3efa01a0 	.word	0x3efa01a0
 8005b08:	16c15177 	.word	0x16c15177
 8005b0c:	3f56c16c 	.word	0x3f56c16c
 8005b10:	5555554c 	.word	0x5555554c
 8005b14:	3fa55555 	.word	0x3fa55555
 8005b18:	00000000 	.word	0x00000000
 8005b1c:	3ff00000 	.word	0x3ff00000
 8005b20:	3fe00000 	.word	0x3fe00000
 8005b24:	3fd33332 	.word	0x3fd33332
 8005b28:	3ff00000 	.word	0x3ff00000
 8005b2c:	3fe90000 	.word	0x3fe90000
 8005b30:	3fd20000 	.word	0x3fd20000
 8005b34:	00000000 	.word	0x00000000

08005b38 <__kernel_rem_pio2>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	ed2d 8b02 	vpush	{d8}
 8005b40:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005b44:	f112 0f14 	cmn.w	r2, #20
 8005b48:	9308      	str	r3, [sp, #32]
 8005b4a:	9101      	str	r1, [sp, #4]
 8005b4c:	4bc6      	ldr	r3, [pc, #792]	; (8005e68 <__kernel_rem_pio2+0x330>)
 8005b4e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005b50:	9009      	str	r0, [sp, #36]	; 0x24
 8005b52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	9b08      	ldr	r3, [sp, #32]
 8005b5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b5e:	bfa8      	it	ge
 8005b60:	1ed4      	subge	r4, r2, #3
 8005b62:	9306      	str	r3, [sp, #24]
 8005b64:	bfb2      	itee	lt
 8005b66:	2400      	movlt	r4, #0
 8005b68:	2318      	movge	r3, #24
 8005b6a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005b6e:	f06f 0317 	mvn.w	r3, #23
 8005b72:	fb04 3303 	mla	r3, r4, r3, r3
 8005b76:	eb03 0a02 	add.w	sl, r3, r2
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	9a06      	ldr	r2, [sp, #24]
 8005b7e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005e58 <__kernel_rem_pio2+0x320>
 8005b82:	eb03 0802 	add.w	r8, r3, r2
 8005b86:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005b88:	1aa7      	subs	r7, r4, r2
 8005b8a:	ae20      	add	r6, sp, #128	; 0x80
 8005b8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005b90:	2500      	movs	r5, #0
 8005b92:	4545      	cmp	r5, r8
 8005b94:	dd18      	ble.n	8005bc8 <__kernel_rem_pio2+0x90>
 8005b96:	9b08      	ldr	r3, [sp, #32]
 8005b98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005b9c:	aa20      	add	r2, sp, #128	; 0x80
 8005b9e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005e58 <__kernel_rem_pio2+0x320>
 8005ba2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005ba6:	f1c3 0301 	rsb	r3, r3, #1
 8005baa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005bae:	9307      	str	r3, [sp, #28]
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	4443      	add	r3, r8
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	db2f      	blt.n	8005c1a <__kernel_rem_pio2+0xe2>
 8005bba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005bbe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005bc2:	462f      	mov	r7, r5
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	e01b      	b.n	8005c00 <__kernel_rem_pio2+0xc8>
 8005bc8:	42ef      	cmn	r7, r5
 8005bca:	d407      	bmi.n	8005bdc <__kernel_rem_pio2+0xa4>
 8005bcc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005bd0:	f7fa fc54 	bl	800047c <__aeabi_i2d>
 8005bd4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005bd8:	3501      	adds	r5, #1
 8005bda:	e7da      	b.n	8005b92 <__kernel_rem_pio2+0x5a>
 8005bdc:	ec51 0b18 	vmov	r0, r1, d8
 8005be0:	e7f8      	b.n	8005bd4 <__kernel_rem_pio2+0x9c>
 8005be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005bea:	f7fa fcb1 	bl	8000550 <__aeabi_dmul>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf6:	f7fa faf5 	bl	80001e4 <__adddf3>
 8005bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bfe:	3601      	adds	r6, #1
 8005c00:	9b06      	ldr	r3, [sp, #24]
 8005c02:	429e      	cmp	r6, r3
 8005c04:	f1a7 0708 	sub.w	r7, r7, #8
 8005c08:	ddeb      	ble.n	8005be2 <__kernel_rem_pio2+0xaa>
 8005c0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c0e:	3508      	adds	r5, #8
 8005c10:	ecab 7b02 	vstmia	fp!, {d7}
 8005c14:	f108 0801 	add.w	r8, r8, #1
 8005c18:	e7ca      	b.n	8005bb0 <__kernel_rem_pio2+0x78>
 8005c1a:	9b04      	ldr	r3, [sp, #16]
 8005c1c:	aa0c      	add	r2, sp, #48	; 0x30
 8005c1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c24:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005c26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005c2a:	9c04      	ldr	r4, [sp, #16]
 8005c2c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c2e:	ab98      	add	r3, sp, #608	; 0x260
 8005c30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c34:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005c38:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005c3c:	f8cd b008 	str.w	fp, [sp, #8]
 8005c40:	4625      	mov	r5, r4
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	dc78      	bgt.n	8005d38 <__kernel_rem_pio2+0x200>
 8005c46:	ec47 6b10 	vmov	d0, r6, r7
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	f000 fbfc 	bl	8006448 <scalbn>
 8005c50:	ec57 6b10 	vmov	r6, r7, d0
 8005c54:	2200      	movs	r2, #0
 8005c56:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005c5a:	ee10 0a10 	vmov	r0, s0
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f7fa fc76 	bl	8000550 <__aeabi_dmul>
 8005c64:	ec41 0b10 	vmov	d0, r0, r1
 8005c68:	f000 fb6e 	bl	8006348 <floor>
 8005c6c:	4b7f      	ldr	r3, [pc, #508]	; (8005e6c <__kernel_rem_pio2+0x334>)
 8005c6e:	ec51 0b10 	vmov	r0, r1, d0
 8005c72:	2200      	movs	r2, #0
 8005c74:	f7fa fc6c 	bl	8000550 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa faae 	bl	80001e0 <__aeabi_dsub>
 8005c84:	460f      	mov	r7, r1
 8005c86:	4606      	mov	r6, r0
 8005c88:	f7fa fefc 	bl	8000a84 <__aeabi_d2iz>
 8005c8c:	9007      	str	r0, [sp, #28]
 8005c8e:	f7fa fbf5 	bl	800047c <__aeabi_i2d>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa faa1 	bl	80001e0 <__aeabi_dsub>
 8005c9e:	f1ba 0f00 	cmp.w	sl, #0
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460f      	mov	r7, r1
 8005ca6:	dd70      	ble.n	8005d8a <__kernel_rem_pio2+0x252>
 8005ca8:	1e62      	subs	r2, r4, #1
 8005caa:	ab0c      	add	r3, sp, #48	; 0x30
 8005cac:	9d07      	ldr	r5, [sp, #28]
 8005cae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005cb2:	f1ca 0118 	rsb	r1, sl, #24
 8005cb6:	fa40 f301 	asr.w	r3, r0, r1
 8005cba:	441d      	add	r5, r3
 8005cbc:	408b      	lsls	r3, r1
 8005cbe:	1ac0      	subs	r0, r0, r3
 8005cc0:	ab0c      	add	r3, sp, #48	; 0x30
 8005cc2:	9507      	str	r5, [sp, #28]
 8005cc4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005cc8:	f1ca 0317 	rsb	r3, sl, #23
 8005ccc:	fa40 f303 	asr.w	r3, r0, r3
 8005cd0:	9302      	str	r3, [sp, #8]
 8005cd2:	9b02      	ldr	r3, [sp, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dd66      	ble.n	8005da6 <__kernel_rem_pio2+0x26e>
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	3301      	adds	r3, #1
 8005cde:	9307      	str	r3, [sp, #28]
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ce6:	4294      	cmp	r4, r2
 8005ce8:	f300 8099 	bgt.w	8005e1e <__kernel_rem_pio2+0x2e6>
 8005cec:	f1ba 0f00 	cmp.w	sl, #0
 8005cf0:	dd07      	ble.n	8005d02 <__kernel_rem_pio2+0x1ca>
 8005cf2:	f1ba 0f01 	cmp.w	sl, #1
 8005cf6:	f000 80a5 	beq.w	8005e44 <__kernel_rem_pio2+0x30c>
 8005cfa:	f1ba 0f02 	cmp.w	sl, #2
 8005cfe:	f000 80c1 	beq.w	8005e84 <__kernel_rem_pio2+0x34c>
 8005d02:	9b02      	ldr	r3, [sp, #8]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d14e      	bne.n	8005da6 <__kernel_rem_pio2+0x26e>
 8005d08:	4632      	mov	r2, r6
 8005d0a:	463b      	mov	r3, r7
 8005d0c:	4958      	ldr	r1, [pc, #352]	; (8005e70 <__kernel_rem_pio2+0x338>)
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f7fa fa66 	bl	80001e0 <__aeabi_dsub>
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	d044      	beq.n	8005da6 <__kernel_rem_pio2+0x26e>
 8005d1c:	4650      	mov	r0, sl
 8005d1e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005e60 <__kernel_rem_pio2+0x328>
 8005d22:	f000 fb91 	bl	8006448 <scalbn>
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	ec53 2b10 	vmov	r2, r3, d0
 8005d2e:	f7fa fa57 	bl	80001e0 <__aeabi_dsub>
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	e036      	b.n	8005da6 <__kernel_rem_pio2+0x26e>
 8005d38:	4b4e      	ldr	r3, [pc, #312]	; (8005e74 <__kernel_rem_pio2+0x33c>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fa fc06 	bl	8000550 <__aeabi_dmul>
 8005d44:	f7fa fe9e 	bl	8000a84 <__aeabi_d2iz>
 8005d48:	f7fa fb98 	bl	800047c <__aeabi_i2d>
 8005d4c:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <__kernel_rem_pio2+0x340>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	4680      	mov	r8, r0
 8005d52:	4689      	mov	r9, r1
 8005d54:	f7fa fbfc 	bl	8000550 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fa3e 	bl	80001e0 <__aeabi_dsub>
 8005d64:	f7fa fe8e 	bl	8000a84 <__aeabi_d2iz>
 8005d68:	9b02      	ldr	r3, [sp, #8]
 8005d6a:	f843 0b04 	str.w	r0, [r3], #4
 8005d6e:	3d01      	subs	r5, #1
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	ab70      	add	r3, sp, #448	; 0x1c0
 8005d74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	4649      	mov	r1, r9
 8005d80:	f7fa fa30 	bl	80001e4 <__adddf3>
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	e75b      	b.n	8005c42 <__kernel_rem_pio2+0x10a>
 8005d8a:	d105      	bne.n	8005d98 <__kernel_rem_pio2+0x260>
 8005d8c:	1e63      	subs	r3, r4, #1
 8005d8e:	aa0c      	add	r2, sp, #48	; 0x30
 8005d90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005d94:	15c3      	asrs	r3, r0, #23
 8005d96:	e79b      	b.n	8005cd0 <__kernel_rem_pio2+0x198>
 8005d98:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <__kernel_rem_pio2+0x344>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f7fa fe5e 	bl	8000a5c <__aeabi_dcmpge>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d139      	bne.n	8005e18 <__kernel_rem_pio2+0x2e0>
 8005da4:	9002      	str	r0, [sp, #8]
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa fe37 	bl	8000a20 <__aeabi_dcmpeq>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f000 80b4 	beq.w	8005f20 <__kernel_rem_pio2+0x3e8>
 8005db8:	f104 3bff 	add.w	fp, r4, #4294967295
 8005dbc:	465b      	mov	r3, fp
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	9904      	ldr	r1, [sp, #16]
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	da65      	bge.n	8005e92 <__kernel_rem_pio2+0x35a>
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	d07b      	beq.n	8005ec2 <__kernel_rem_pio2+0x38a>
 8005dca:	ab0c      	add	r3, sp, #48	; 0x30
 8005dcc:	f1aa 0a18 	sub.w	sl, sl, #24
 8005dd0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a0 	beq.w	8005f1a <__kernel_rem_pio2+0x3e2>
 8005dda:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005e60 <__kernel_rem_pio2+0x328>
 8005dde:	4650      	mov	r0, sl
 8005de0:	f000 fb32 	bl	8006448 <scalbn>
 8005de4:	4f23      	ldr	r7, [pc, #140]	; (8005e74 <__kernel_rem_pio2+0x33c>)
 8005de6:	ec55 4b10 	vmov	r4, r5, d0
 8005dea:	46d8      	mov	r8, fp
 8005dec:	2600      	movs	r6, #0
 8005dee:	f1b8 0f00 	cmp.w	r8, #0
 8005df2:	f280 80cf 	bge.w	8005f94 <__kernel_rem_pio2+0x45c>
 8005df6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005e58 <__kernel_rem_pio2+0x320>
 8005dfa:	465f      	mov	r7, fp
 8005dfc:	f04f 0800 	mov.w	r8, #0
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f2c0 80fd 	blt.w	8006000 <__kernel_rem_pio2+0x4c8>
 8005e06:	ab70      	add	r3, sp, #448	; 0x1c0
 8005e08:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005e80 <__kernel_rem_pio2+0x348>
 8005e0c:	ec55 4b18 	vmov	r4, r5, d8
 8005e10:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005e14:	2600      	movs	r6, #0
 8005e16:	e0e5      	b.n	8005fe4 <__kernel_rem_pio2+0x4ac>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	9302      	str	r3, [sp, #8]
 8005e1c:	e75c      	b.n	8005cd8 <__kernel_rem_pio2+0x1a0>
 8005e1e:	f8db 3000 	ldr.w	r3, [fp]
 8005e22:	b955      	cbnz	r5, 8005e3a <__kernel_rem_pio2+0x302>
 8005e24:	b123      	cbz	r3, 8005e30 <__kernel_rem_pio2+0x2f8>
 8005e26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005e2a:	f8cb 3000 	str.w	r3, [fp]
 8005e2e:	2301      	movs	r3, #1
 8005e30:	3201      	adds	r2, #1
 8005e32:	f10b 0b04 	add.w	fp, fp, #4
 8005e36:	461d      	mov	r5, r3
 8005e38:	e755      	b.n	8005ce6 <__kernel_rem_pio2+0x1ae>
 8005e3a:	1acb      	subs	r3, r1, r3
 8005e3c:	f8cb 3000 	str.w	r3, [fp]
 8005e40:	462b      	mov	r3, r5
 8005e42:	e7f5      	b.n	8005e30 <__kernel_rem_pio2+0x2f8>
 8005e44:	1e62      	subs	r2, r4, #1
 8005e46:	ab0c      	add	r3, sp, #48	; 0x30
 8005e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005e50:	a90c      	add	r1, sp, #48	; 0x30
 8005e52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005e56:	e754      	b.n	8005d02 <__kernel_rem_pio2+0x1ca>
	...
 8005e64:	3ff00000 	.word	0x3ff00000
 8005e68:	08006758 	.word	0x08006758
 8005e6c:	40200000 	.word	0x40200000
 8005e70:	3ff00000 	.word	0x3ff00000
 8005e74:	3e700000 	.word	0x3e700000
 8005e78:	41700000 	.word	0x41700000
 8005e7c:	3fe00000 	.word	0x3fe00000
 8005e80:	08006718 	.word	0x08006718
 8005e84:	1e62      	subs	r2, r4, #1
 8005e86:	ab0c      	add	r3, sp, #48	; 0x30
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e90:	e7de      	b.n	8005e50 <__kernel_rem_pio2+0x318>
 8005e92:	a90c      	add	r1, sp, #48	; 0x30
 8005e94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	e790      	b.n	8005dc0 <__kernel_rem_pio2+0x288>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d0fa      	beq.n	8005e9e <__kernel_rem_pio2+0x366>
 8005ea8:	9a08      	ldr	r2, [sp, #32]
 8005eaa:	18e3      	adds	r3, r4, r3
 8005eac:	18a6      	adds	r6, r4, r2
 8005eae:	aa20      	add	r2, sp, #128	; 0x80
 8005eb0:	1c65      	adds	r5, r4, #1
 8005eb2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005eb6:	9302      	str	r3, [sp, #8]
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	42ab      	cmp	r3, r5
 8005ebc:	da04      	bge.n	8005ec8 <__kernel_rem_pio2+0x390>
 8005ebe:	461c      	mov	r4, r3
 8005ec0:	e6b5      	b.n	8005c2e <__kernel_rem_pio2+0xf6>
 8005ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e7eb      	b.n	8005ea0 <__kernel_rem_pio2+0x368>
 8005ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ece:	f7fa fad5 	bl	800047c <__aeabi_i2d>
 8005ed2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed8:	46b3      	mov	fp, r6
 8005eda:	461c      	mov	r4, r3
 8005edc:	2700      	movs	r7, #0
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	f04f 0900 	mov.w	r9, #0
 8005ee6:	9b06      	ldr	r3, [sp, #24]
 8005ee8:	429f      	cmp	r7, r3
 8005eea:	dd06      	ble.n	8005efa <__kernel_rem_pio2+0x3c2>
 8005eec:	ab70      	add	r3, sp, #448	; 0x1c0
 8005eee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005ef2:	e9c3 8900 	strd	r8, r9, [r3]
 8005ef6:	3501      	adds	r5, #1
 8005ef8:	e7de      	b.n	8005eb8 <__kernel_rem_pio2+0x380>
 8005efa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005efe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005f02:	f7fa fb25 	bl	8000550 <__aeabi_dmul>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	f7fa f969 	bl	80001e4 <__adddf3>
 8005f12:	3701      	adds	r7, #1
 8005f14:	4680      	mov	r8, r0
 8005f16:	4689      	mov	r9, r1
 8005f18:	e7e5      	b.n	8005ee6 <__kernel_rem_pio2+0x3ae>
 8005f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f1e:	e754      	b.n	8005dca <__kernel_rem_pio2+0x292>
 8005f20:	ec47 6b10 	vmov	d0, r6, r7
 8005f24:	f1ca 0000 	rsb	r0, sl, #0
 8005f28:	f000 fa8e 	bl	8006448 <scalbn>
 8005f2c:	ec57 6b10 	vmov	r6, r7, d0
 8005f30:	4b9f      	ldr	r3, [pc, #636]	; (80061b0 <__kernel_rem_pio2+0x678>)
 8005f32:	ee10 0a10 	vmov	r0, s0
 8005f36:	2200      	movs	r2, #0
 8005f38:	4639      	mov	r1, r7
 8005f3a:	f7fa fd8f 	bl	8000a5c <__aeabi_dcmpge>
 8005f3e:	b300      	cbz	r0, 8005f82 <__kernel_rem_pio2+0x44a>
 8005f40:	4b9c      	ldr	r3, [pc, #624]	; (80061b4 <__kernel_rem_pio2+0x67c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	4630      	mov	r0, r6
 8005f46:	4639      	mov	r1, r7
 8005f48:	f7fa fb02 	bl	8000550 <__aeabi_dmul>
 8005f4c:	f7fa fd9a 	bl	8000a84 <__aeabi_d2iz>
 8005f50:	4605      	mov	r5, r0
 8005f52:	f7fa fa93 	bl	800047c <__aeabi_i2d>
 8005f56:	4b96      	ldr	r3, [pc, #600]	; (80061b0 <__kernel_rem_pio2+0x678>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f7fa faf9 	bl	8000550 <__aeabi_dmul>
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4602      	mov	r2, r0
 8005f62:	4639      	mov	r1, r7
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7fa f93b 	bl	80001e0 <__aeabi_dsub>
 8005f6a:	f7fa fd8b 	bl	8000a84 <__aeabi_d2iz>
 8005f6e:	f104 0b01 	add.w	fp, r4, #1
 8005f72:	ab0c      	add	r3, sp, #48	; 0x30
 8005f74:	f10a 0a18 	add.w	sl, sl, #24
 8005f78:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f7c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005f80:	e72b      	b.n	8005dda <__kernel_rem_pio2+0x2a2>
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa fd7d 	bl	8000a84 <__aeabi_d2iz>
 8005f8a:	ab0c      	add	r3, sp, #48	; 0x30
 8005f8c:	46a3      	mov	fp, r4
 8005f8e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f92:	e722      	b.n	8005dda <__kernel_rem_pio2+0x2a2>
 8005f94:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f96:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005f9a:	ab0c      	add	r3, sp, #48	; 0x30
 8005f9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005fa0:	f7fa fa6c 	bl	800047c <__aeabi_i2d>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	f7fa fad2 	bl	8000550 <__aeabi_dmul>
 8005fac:	4632      	mov	r2, r6
 8005fae:	e9c9 0100 	strd	r0, r1, [r9]
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa faca 	bl	8000550 <__aeabi_dmul>
 8005fbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	e713      	b.n	8005dee <__kernel_rem_pio2+0x2b6>
 8005fc6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005fca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005fce:	f7fa fabf 	bl	8000550 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa f903 	bl	80001e4 <__adddf3>
 8005fde:	3601      	adds	r6, #1
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	429e      	cmp	r6, r3
 8005fe8:	dc01      	bgt.n	8005fee <__kernel_rem_pio2+0x4b6>
 8005fea:	45b0      	cmp	r8, r6
 8005fec:	daeb      	bge.n	8005fc6 <__kernel_rem_pio2+0x48e>
 8005fee:	ab48      	add	r3, sp, #288	; 0x120
 8005ff0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005ff4:	e9c3 4500 	strd	r4, r5, [r3]
 8005ff8:	3f01      	subs	r7, #1
 8005ffa:	f108 0801 	add.w	r8, r8, #1
 8005ffe:	e6ff      	b.n	8005e00 <__kernel_rem_pio2+0x2c8>
 8006000:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006002:	2b02      	cmp	r3, #2
 8006004:	dc0b      	bgt.n	800601e <__kernel_rem_pio2+0x4e6>
 8006006:	2b00      	cmp	r3, #0
 8006008:	dc6e      	bgt.n	80060e8 <__kernel_rem_pio2+0x5b0>
 800600a:	d045      	beq.n	8006098 <__kernel_rem_pio2+0x560>
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	f003 0007 	and.w	r0, r3, #7
 8006012:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006016:	ecbd 8b02 	vpop	{d8}
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006020:	2b03      	cmp	r3, #3
 8006022:	d1f3      	bne.n	800600c <__kernel_rem_pio2+0x4d4>
 8006024:	ab48      	add	r3, sp, #288	; 0x120
 8006026:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800602a:	46d0      	mov	r8, sl
 800602c:	46d9      	mov	r9, fp
 800602e:	f1b9 0f00 	cmp.w	r9, #0
 8006032:	f1a8 0808 	sub.w	r8, r8, #8
 8006036:	dc64      	bgt.n	8006102 <__kernel_rem_pio2+0x5ca>
 8006038:	465c      	mov	r4, fp
 800603a:	2c01      	cmp	r4, #1
 800603c:	f1aa 0a08 	sub.w	sl, sl, #8
 8006040:	dc7e      	bgt.n	8006140 <__kernel_rem_pio2+0x608>
 8006042:	2000      	movs	r0, #0
 8006044:	2100      	movs	r1, #0
 8006046:	f1bb 0f01 	cmp.w	fp, #1
 800604a:	f300 8097 	bgt.w	800617c <__kernel_rem_pio2+0x644>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006054:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8099 	bne.w	8006190 <__kernel_rem_pio2+0x658>
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	e9c3 5600 	strd	r5, r6, [r3]
 8006064:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006068:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800606c:	e7ce      	b.n	800600c <__kernel_rem_pio2+0x4d4>
 800606e:	ab48      	add	r3, sp, #288	; 0x120
 8006070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f7fa f8b4 	bl	80001e4 <__adddf3>
 800607c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006080:	f1bb 0f00 	cmp.w	fp, #0
 8006084:	daf3      	bge.n	800606e <__kernel_rem_pio2+0x536>
 8006086:	9b02      	ldr	r3, [sp, #8]
 8006088:	b113      	cbz	r3, 8006090 <__kernel_rem_pio2+0x558>
 800608a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800608e:	4619      	mov	r1, r3
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	e9c3 0100 	strd	r0, r1, [r3]
 8006096:	e7b9      	b.n	800600c <__kernel_rem_pio2+0x4d4>
 8006098:	2000      	movs	r0, #0
 800609a:	2100      	movs	r1, #0
 800609c:	e7f0      	b.n	8006080 <__kernel_rem_pio2+0x548>
 800609e:	ab48      	add	r3, sp, #288	; 0x120
 80060a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa f89c 	bl	80001e4 <__adddf3>
 80060ac:	3c01      	subs	r4, #1
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	daf5      	bge.n	800609e <__kernel_rem_pio2+0x566>
 80060b2:	9b02      	ldr	r3, [sp, #8]
 80060b4:	b1e3      	cbz	r3, 80060f0 <__kernel_rem_pio2+0x5b8>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060bc:	9c01      	ldr	r4, [sp, #4]
 80060be:	e9c4 2300 	strd	r2, r3, [r4]
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80060ca:	f7fa f889 	bl	80001e0 <__aeabi_dsub>
 80060ce:	ad4a      	add	r5, sp, #296	; 0x128
 80060d0:	2401      	movs	r4, #1
 80060d2:	45a3      	cmp	fp, r4
 80060d4:	da0f      	bge.n	80060f6 <__kernel_rem_pio2+0x5be>
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	b113      	cbz	r3, 80060e0 <__kernel_rem_pio2+0x5a8>
 80060da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060de:	4619      	mov	r1, r3
 80060e0:	9b01      	ldr	r3, [sp, #4]
 80060e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80060e6:	e791      	b.n	800600c <__kernel_rem_pio2+0x4d4>
 80060e8:	465c      	mov	r4, fp
 80060ea:	2000      	movs	r0, #0
 80060ec:	2100      	movs	r1, #0
 80060ee:	e7de      	b.n	80060ae <__kernel_rem_pio2+0x576>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	e7e2      	b.n	80060bc <__kernel_rem_pio2+0x584>
 80060f6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80060fa:	f7fa f873 	bl	80001e4 <__adddf3>
 80060fe:	3401      	adds	r4, #1
 8006100:	e7e7      	b.n	80060d2 <__kernel_rem_pio2+0x59a>
 8006102:	e9d8 4500 	ldrd	r4, r5, [r8]
 8006106:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800610a:	4620      	mov	r0, r4
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa f867 	bl	80001e4 <__adddf3>
 8006116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa f85d 	bl	80001e0 <__aeabi_dsub>
 8006126:	4632      	mov	r2, r6
 8006128:	463b      	mov	r3, r7
 800612a:	f7fa f85b 	bl	80001e4 <__adddf3>
 800612e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006132:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006136:	ed88 7b00 	vstr	d7, [r8]
 800613a:	f109 39ff 	add.w	r9, r9, #4294967295
 800613e:	e776      	b.n	800602e <__kernel_rem_pio2+0x4f6>
 8006140:	e9da 8900 	ldrd	r8, r9, [sl]
 8006144:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006148:	4640      	mov	r0, r8
 800614a:	4632      	mov	r2, r6
 800614c:	463b      	mov	r3, r7
 800614e:	4649      	mov	r1, r9
 8006150:	f7fa f848 	bl	80001e4 <__adddf3>
 8006154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4640      	mov	r0, r8
 800615e:	4649      	mov	r1, r9
 8006160:	f7fa f83e 	bl	80001e0 <__aeabi_dsub>
 8006164:	4632      	mov	r2, r6
 8006166:	463b      	mov	r3, r7
 8006168:	f7fa f83c 	bl	80001e4 <__adddf3>
 800616c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006170:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006174:	ed8a 7b00 	vstr	d7, [sl]
 8006178:	3c01      	subs	r4, #1
 800617a:	e75e      	b.n	800603a <__kernel_rem_pio2+0x502>
 800617c:	ab48      	add	r3, sp, #288	; 0x120
 800617e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa f82d 	bl	80001e4 <__adddf3>
 800618a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800618e:	e75a      	b.n	8006046 <__kernel_rem_pio2+0x50e>
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	9a01      	ldr	r2, [sp, #4]
 8006194:	601d      	str	r5, [r3, #0]
 8006196:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800619a:	605c      	str	r4, [r3, #4]
 800619c:	609f      	str	r7, [r3, #8]
 800619e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80061a2:	60d3      	str	r3, [r2, #12]
 80061a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061a8:	6110      	str	r0, [r2, #16]
 80061aa:	6153      	str	r3, [r2, #20]
 80061ac:	e72e      	b.n	800600c <__kernel_rem_pio2+0x4d4>
 80061ae:	bf00      	nop
 80061b0:	41700000 	.word	0x41700000
 80061b4:	3e700000 	.word	0x3e700000

080061b8 <__kernel_sin>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	ed2d 8b04 	vpush	{d8-d9}
 80061c0:	eeb0 8a41 	vmov.f32	s16, s2
 80061c4:	eef0 8a61 	vmov.f32	s17, s3
 80061c8:	ec55 4b10 	vmov	r4, r5, d0
 80061cc:	b083      	sub	sp, #12
 80061ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80061d6:	9001      	str	r0, [sp, #4]
 80061d8:	da06      	bge.n	80061e8 <__kernel_sin+0x30>
 80061da:	ee10 0a10 	vmov	r0, s0
 80061de:	4629      	mov	r1, r5
 80061e0:	f7fa fc50 	bl	8000a84 <__aeabi_d2iz>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d051      	beq.n	800628c <__kernel_sin+0xd4>
 80061e8:	4622      	mov	r2, r4
 80061ea:	462b      	mov	r3, r5
 80061ec:	4620      	mov	r0, r4
 80061ee:	4629      	mov	r1, r5
 80061f0:	f7fa f9ae 	bl	8000550 <__aeabi_dmul>
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa f9a6 	bl	8000550 <__aeabi_dmul>
 8006204:	a341      	add	r3, pc, #260	; (adr r3, 800630c <__kernel_sin+0x154>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	4680      	mov	r8, r0
 800620c:	4689      	mov	r9, r1
 800620e:	4650      	mov	r0, sl
 8006210:	4659      	mov	r1, fp
 8006212:	f7fa f99d 	bl	8000550 <__aeabi_dmul>
 8006216:	a33f      	add	r3, pc, #252	; (adr r3, 8006314 <__kernel_sin+0x15c>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f7f9 ffe0 	bl	80001e0 <__aeabi_dsub>
 8006220:	4652      	mov	r2, sl
 8006222:	465b      	mov	r3, fp
 8006224:	f7fa f994 	bl	8000550 <__aeabi_dmul>
 8006228:	a33c      	add	r3, pc, #240	; (adr r3, 800631c <__kernel_sin+0x164>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7f9 ffd9 	bl	80001e4 <__adddf3>
 8006232:	4652      	mov	r2, sl
 8006234:	465b      	mov	r3, fp
 8006236:	f7fa f98b 	bl	8000550 <__aeabi_dmul>
 800623a:	a33a      	add	r3, pc, #232	; (adr r3, 8006324 <__kernel_sin+0x16c>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7f9 ffce 	bl	80001e0 <__aeabi_dsub>
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	f7fa f982 	bl	8000550 <__aeabi_dmul>
 800624c:	a337      	add	r3, pc, #220	; (adr r3, 800632c <__kernel_sin+0x174>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7f9 ffc7 	bl	80001e4 <__adddf3>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	4606      	mov	r6, r0
 800625a:	460f      	mov	r7, r1
 800625c:	b9eb      	cbnz	r3, 800629a <__kernel_sin+0xe2>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	4650      	mov	r0, sl
 8006264:	4659      	mov	r1, fp
 8006266:	f7fa f973 	bl	8000550 <__aeabi_dmul>
 800626a:	a325      	add	r3, pc, #148	; (adr r3, 8006300 <__kernel_sin+0x148>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7f9 ffb6 	bl	80001e0 <__aeabi_dsub>
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	f7fa f96a 	bl	8000550 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4620      	mov	r0, r4
 8006282:	4629      	mov	r1, r5
 8006284:	f7f9 ffae 	bl	80001e4 <__adddf3>
 8006288:	4604      	mov	r4, r0
 800628a:	460d      	mov	r5, r1
 800628c:	ec45 4b10 	vmov	d0, r4, r5
 8006290:	b003      	add	sp, #12
 8006292:	ecbd 8b04 	vpop	{d8-d9}
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <__kernel_sin+0x150>)
 800629c:	ec51 0b18 	vmov	r0, r1, d8
 80062a0:	2200      	movs	r2, #0
 80062a2:	f7fa f955 	bl	8000550 <__aeabi_dmul>
 80062a6:	4632      	mov	r2, r6
 80062a8:	ec41 0b19 	vmov	d9, r0, r1
 80062ac:	463b      	mov	r3, r7
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa f94d 	bl	8000550 <__aeabi_dmul>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	ec51 0b19 	vmov	r0, r1, d9
 80062be:	f7f9 ff8f 	bl	80001e0 <__aeabi_dsub>
 80062c2:	4652      	mov	r2, sl
 80062c4:	465b      	mov	r3, fp
 80062c6:	f7fa f943 	bl	8000550 <__aeabi_dmul>
 80062ca:	ec53 2b18 	vmov	r2, r3, d8
 80062ce:	f7f9 ff87 	bl	80001e0 <__aeabi_dsub>
 80062d2:	a30b      	add	r3, pc, #44	; (adr r3, 8006300 <__kernel_sin+0x148>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	4606      	mov	r6, r0
 80062da:	460f      	mov	r7, r1
 80062dc:	4640      	mov	r0, r8
 80062de:	4649      	mov	r1, r9
 80062e0:	f7fa f936 	bl	8000550 <__aeabi_dmul>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4630      	mov	r0, r6
 80062ea:	4639      	mov	r1, r7
 80062ec:	f7f9 ff7a 	bl	80001e4 <__adddf3>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7f9 ff72 	bl	80001e0 <__aeabi_dsub>
 80062fc:	e7c4      	b.n	8006288 <__kernel_sin+0xd0>
 80062fe:	bf00      	nop
 8006300:	55555549 	.word	0x55555549
 8006304:	3fc55555 	.word	0x3fc55555
 8006308:	3fe00000 	.word	0x3fe00000
 800630c:	5acfd57c 	.word	0x5acfd57c
 8006310:	3de5d93a 	.word	0x3de5d93a
 8006314:	8a2b9ceb 	.word	0x8a2b9ceb
 8006318:	3e5ae5e6 	.word	0x3e5ae5e6
 800631c:	57b1fe7d 	.word	0x57b1fe7d
 8006320:	3ec71de3 	.word	0x3ec71de3
 8006324:	19c161d5 	.word	0x19c161d5
 8006328:	3f2a01a0 	.word	0x3f2a01a0
 800632c:	1110f8a6 	.word	0x1110f8a6
 8006330:	3f811111 	.word	0x3f811111

08006334 <fabs>:
 8006334:	ec51 0b10 	vmov	r0, r1, d0
 8006338:	ee10 2a10 	vmov	r2, s0
 800633c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006340:	ec43 2b10 	vmov	d0, r2, r3
 8006344:	4770      	bx	lr
	...

08006348 <floor>:
 8006348:	ec51 0b10 	vmov	r0, r1, d0
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006354:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006358:	2e13      	cmp	r6, #19
 800635a:	ee10 5a10 	vmov	r5, s0
 800635e:	ee10 8a10 	vmov	r8, s0
 8006362:	460c      	mov	r4, r1
 8006364:	dc32      	bgt.n	80063cc <floor+0x84>
 8006366:	2e00      	cmp	r6, #0
 8006368:	da14      	bge.n	8006394 <floor+0x4c>
 800636a:	a333      	add	r3, pc, #204	; (adr r3, 8006438 <floor+0xf0>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7f9 ff38 	bl	80001e4 <__adddf3>
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	f7fa fb7a 	bl	8000a70 <__aeabi_dcmpgt>
 800637c:	b138      	cbz	r0, 800638e <floor+0x46>
 800637e:	2c00      	cmp	r4, #0
 8006380:	da57      	bge.n	8006432 <floor+0xea>
 8006382:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006386:	431d      	orrs	r5, r3
 8006388:	d001      	beq.n	800638e <floor+0x46>
 800638a:	4c2d      	ldr	r4, [pc, #180]	; (8006440 <floor+0xf8>)
 800638c:	2500      	movs	r5, #0
 800638e:	4621      	mov	r1, r4
 8006390:	4628      	mov	r0, r5
 8006392:	e025      	b.n	80063e0 <floor+0x98>
 8006394:	4f2b      	ldr	r7, [pc, #172]	; (8006444 <floor+0xfc>)
 8006396:	4137      	asrs	r7, r6
 8006398:	ea01 0307 	and.w	r3, r1, r7
 800639c:	4303      	orrs	r3, r0
 800639e:	d01f      	beq.n	80063e0 <floor+0x98>
 80063a0:	a325      	add	r3, pc, #148	; (adr r3, 8006438 <floor+0xf0>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7f9 ff1d 	bl	80001e4 <__adddf3>
 80063aa:	2200      	movs	r2, #0
 80063ac:	2300      	movs	r3, #0
 80063ae:	f7fa fb5f 	bl	8000a70 <__aeabi_dcmpgt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d0eb      	beq.n	800638e <floor+0x46>
 80063b6:	2c00      	cmp	r4, #0
 80063b8:	bfbe      	ittt	lt
 80063ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80063be:	fa43 f606 	asrlt.w	r6, r3, r6
 80063c2:	19a4      	addlt	r4, r4, r6
 80063c4:	ea24 0407 	bic.w	r4, r4, r7
 80063c8:	2500      	movs	r5, #0
 80063ca:	e7e0      	b.n	800638e <floor+0x46>
 80063cc:	2e33      	cmp	r6, #51	; 0x33
 80063ce:	dd0b      	ble.n	80063e8 <floor+0xa0>
 80063d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063d4:	d104      	bne.n	80063e0 <floor+0x98>
 80063d6:	ee10 2a10 	vmov	r2, s0
 80063da:	460b      	mov	r3, r1
 80063dc:	f7f9 ff02 	bl	80001e4 <__adddf3>
 80063e0:	ec41 0b10 	vmov	d0, r0, r1
 80063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295
 80063f0:	fa23 f707 	lsr.w	r7, r3, r7
 80063f4:	4207      	tst	r7, r0
 80063f6:	d0f3      	beq.n	80063e0 <floor+0x98>
 80063f8:	a30f      	add	r3, pc, #60	; (adr r3, 8006438 <floor+0xf0>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7f9 fef1 	bl	80001e4 <__adddf3>
 8006402:	2200      	movs	r2, #0
 8006404:	2300      	movs	r3, #0
 8006406:	f7fa fb33 	bl	8000a70 <__aeabi_dcmpgt>
 800640a:	2800      	cmp	r0, #0
 800640c:	d0bf      	beq.n	800638e <floor+0x46>
 800640e:	2c00      	cmp	r4, #0
 8006410:	da02      	bge.n	8006418 <floor+0xd0>
 8006412:	2e14      	cmp	r6, #20
 8006414:	d103      	bne.n	800641e <floor+0xd6>
 8006416:	3401      	adds	r4, #1
 8006418:	ea25 0507 	bic.w	r5, r5, r7
 800641c:	e7b7      	b.n	800638e <floor+0x46>
 800641e:	2301      	movs	r3, #1
 8006420:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006424:	fa03 f606 	lsl.w	r6, r3, r6
 8006428:	4435      	add	r5, r6
 800642a:	4545      	cmp	r5, r8
 800642c:	bf38      	it	cc
 800642e:	18e4      	addcc	r4, r4, r3
 8006430:	e7f2      	b.n	8006418 <floor+0xd0>
 8006432:	2500      	movs	r5, #0
 8006434:	462c      	mov	r4, r5
 8006436:	e7aa      	b.n	800638e <floor+0x46>
 8006438:	8800759c 	.word	0x8800759c
 800643c:	7e37e43c 	.word	0x7e37e43c
 8006440:	bff00000 	.word	0xbff00000
 8006444:	000fffff 	.word	0x000fffff

08006448 <scalbn>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	ec55 4b10 	vmov	r4, r5, d0
 800644e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006452:	4606      	mov	r6, r0
 8006454:	462b      	mov	r3, r5
 8006456:	b99a      	cbnz	r2, 8006480 <scalbn+0x38>
 8006458:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800645c:	4323      	orrs	r3, r4
 800645e:	d036      	beq.n	80064ce <scalbn+0x86>
 8006460:	4b39      	ldr	r3, [pc, #228]	; (8006548 <scalbn+0x100>)
 8006462:	4629      	mov	r1, r5
 8006464:	ee10 0a10 	vmov	r0, s0
 8006468:	2200      	movs	r2, #0
 800646a:	f7fa f871 	bl	8000550 <__aeabi_dmul>
 800646e:	4b37      	ldr	r3, [pc, #220]	; (800654c <scalbn+0x104>)
 8006470:	429e      	cmp	r6, r3
 8006472:	4604      	mov	r4, r0
 8006474:	460d      	mov	r5, r1
 8006476:	da10      	bge.n	800649a <scalbn+0x52>
 8006478:	a32b      	add	r3, pc, #172	; (adr r3, 8006528 <scalbn+0xe0>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	e03a      	b.n	80064f6 <scalbn+0xae>
 8006480:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006484:	428a      	cmp	r2, r1
 8006486:	d10c      	bne.n	80064a2 <scalbn+0x5a>
 8006488:	ee10 2a10 	vmov	r2, s0
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7f9 fea8 	bl	80001e4 <__adddf3>
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	e019      	b.n	80064ce <scalbn+0x86>
 800649a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800649e:	460b      	mov	r3, r1
 80064a0:	3a36      	subs	r2, #54	; 0x36
 80064a2:	4432      	add	r2, r6
 80064a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064a8:	428a      	cmp	r2, r1
 80064aa:	dd08      	ble.n	80064be <scalbn+0x76>
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	a120      	add	r1, pc, #128	; (adr r1, 8006530 <scalbn+0xe8>)
 80064b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b4:	da1c      	bge.n	80064f0 <scalbn+0xa8>
 80064b6:	a120      	add	r1, pc, #128	; (adr r1, 8006538 <scalbn+0xf0>)
 80064b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064bc:	e018      	b.n	80064f0 <scalbn+0xa8>
 80064be:	2a00      	cmp	r2, #0
 80064c0:	dd08      	ble.n	80064d4 <scalbn+0x8c>
 80064c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80064ce:	ec45 4b10 	vmov	d0, r4, r5
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80064d8:	da19      	bge.n	800650e <scalbn+0xc6>
 80064da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064de:	429e      	cmp	r6, r3
 80064e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80064e4:	dd0a      	ble.n	80064fc <scalbn+0xb4>
 80064e6:	a112      	add	r1, pc, #72	; (adr r1, 8006530 <scalbn+0xe8>)
 80064e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e2      	bne.n	80064b6 <scalbn+0x6e>
 80064f0:	a30f      	add	r3, pc, #60	; (adr r3, 8006530 <scalbn+0xe8>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f82b 	bl	8000550 <__aeabi_dmul>
 80064fa:	e7cb      	b.n	8006494 <scalbn+0x4c>
 80064fc:	a10a      	add	r1, pc, #40	; (adr r1, 8006528 <scalbn+0xe0>)
 80064fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0b8      	beq.n	8006478 <scalbn+0x30>
 8006506:	a10e      	add	r1, pc, #56	; (adr r1, 8006540 <scalbn+0xf8>)
 8006508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800650c:	e7b4      	b.n	8006478 <scalbn+0x30>
 800650e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006512:	3236      	adds	r2, #54	; 0x36
 8006514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006518:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800651c:	4620      	mov	r0, r4
 800651e:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <scalbn+0x108>)
 8006520:	2200      	movs	r2, #0
 8006522:	e7e8      	b.n	80064f6 <scalbn+0xae>
 8006524:	f3af 8000 	nop.w
 8006528:	c2f8f359 	.word	0xc2f8f359
 800652c:	01a56e1f 	.word	0x01a56e1f
 8006530:	8800759c 	.word	0x8800759c
 8006534:	7e37e43c 	.word	0x7e37e43c
 8006538:	8800759c 	.word	0x8800759c
 800653c:	fe37e43c 	.word	0xfe37e43c
 8006540:	c2f8f359 	.word	0xc2f8f359
 8006544:	81a56e1f 	.word	0x81a56e1f
 8006548:	43500000 	.word	0x43500000
 800654c:	ffff3cb0 	.word	0xffff3cb0
 8006550:	3c900000 	.word	0x3c900000

08006554 <_init>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr

08006560 <_fini>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr
