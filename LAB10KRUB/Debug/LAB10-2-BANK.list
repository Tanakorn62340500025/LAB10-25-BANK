
LAB10-2-BANK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000028  08005210  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08005210  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe4a  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002169  00000000  00000000  0002fe9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00032008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017181  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107f8  00000000  00000000  0004b021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009771f  00000000  00000000  0005b819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004444  00000000  00000000  000f2f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080051a4 	.word	0x080051a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	080051a4 	.word	0x080051a4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b96e 	b.w	8000f24 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468c      	mov	ip, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8083 	bne.w	8000d76 <__udivmoddi4+0x116>
 8000c70:	428a      	cmp	r2, r1
 8000c72:	4617      	mov	r7, r2
 8000c74:	d947      	bls.n	8000d06 <__udivmoddi4+0xa6>
 8000c76:	fab2 f282 	clz	r2, r2
 8000c7a:	b142      	cbz	r2, 8000c8e <__udivmoddi4+0x2e>
 8000c7c:	f1c2 0020 	rsb	r0, r2, #32
 8000c80:	fa24 f000 	lsr.w	r0, r4, r0
 8000c84:	4091      	lsls	r1, r2
 8000c86:	4097      	lsls	r7, r2
 8000c88:	ea40 0c01 	orr.w	ip, r0, r1
 8000c8c:	4094      	lsls	r4, r2
 8000c8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c92:	0c23      	lsrs	r3, r4, #16
 8000c94:	fbbc f6f8 	udiv	r6, ip, r8
 8000c98:	fa1f fe87 	uxth.w	lr, r7
 8000c9c:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca4:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d909      	bls.n	8000cc0 <__udivmoddi4+0x60>
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb2:	f080 8119 	bcs.w	8000ee8 <__udivmoddi4+0x288>
 8000cb6:	4299      	cmp	r1, r3
 8000cb8:	f240 8116 	bls.w	8000ee8 <__udivmoddi4+0x288>
 8000cbc:	3e02      	subs	r6, #2
 8000cbe:	443b      	add	r3, r7
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x8c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	f080 8105 	bcs.w	8000eec <__udivmoddi4+0x28c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f240 8102 	bls.w	8000eec <__udivmoddi4+0x28c>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	443c      	add	r4, r7
 8000cec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf0:	eba4 040e 	sub.w	r4, r4, lr
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	b11d      	cbz	r5, 8000d00 <__udivmoddi4+0xa0>
 8000cf8:	40d4      	lsrs	r4, r2
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e9c5 4300 	strd	r4, r3, [r5]
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	b902      	cbnz	r2, 8000d0a <__udivmoddi4+0xaa>
 8000d08:	deff      	udf	#255	; 0xff
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	d150      	bne.n	8000db4 <__udivmoddi4+0x154>
 8000d12:	1bcb      	subs	r3, r1, r7
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	fa1f f887 	uxth.w	r8, r7
 8000d1c:	2601      	movs	r6, #1
 8000d1e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d22:	0c21      	lsrs	r1, r4, #16
 8000d24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb08 f30c 	mul.w	r3, r8, ip
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0xe4>
 8000d34:	1879      	adds	r1, r7, r1
 8000d36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0xe2>
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	f200 80e9 	bhi.w	8000f14 <__udivmoddi4+0x2b4>
 8000d42:	4684      	mov	ip, r0
 8000d44:	1ac9      	subs	r1, r1, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d4c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d50:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d54:	fb08 f800 	mul.w	r8, r8, r0
 8000d58:	45a0      	cmp	r8, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x10c>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x10a>
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	f200 80d9 	bhi.w	8000f1c <__udivmoddi4+0x2bc>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 0408 	sub.w	r4, r4, r8
 8000d70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d74:	e7bf      	b.n	8000cf6 <__udivmoddi4+0x96>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d909      	bls.n	8000d8e <__udivmoddi4+0x12e>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	f000 80b1 	beq.w	8000ee2 <__udivmoddi4+0x282>
 8000d80:	2600      	movs	r6, #0
 8000d82:	e9c5 0100 	strd	r0, r1, [r5]
 8000d86:	4630      	mov	r0, r6
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	fab3 f683 	clz	r6, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d14a      	bne.n	8000e2c <__udivmoddi4+0x1cc>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0x140>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 80b8 	bhi.w	8000f10 <__udivmoddi4+0x2b0>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb61 0103 	sbc.w	r1, r1, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	468c      	mov	ip, r1
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0a8      	beq.n	8000d00 <__udivmoddi4+0xa0>
 8000dae:	e9c5 4c00 	strd	r4, ip, [r5]
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f603 	lsr.w	r6, r0, r3
 8000dbc:	4097      	lsls	r7, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc6:	40d9      	lsrs	r1, r3
 8000dc8:	4330      	orrs	r0, r6
 8000dca:	0c03      	lsrs	r3, r0, #16
 8000dcc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd0:	fa1f f887 	uxth.w	r8, r7
 8000dd4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ddc:	fb06 f108 	mul.w	r1, r6, r8
 8000de0:	4299      	cmp	r1, r3
 8000de2:	fa04 f402 	lsl.w	r4, r4, r2
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x19c>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dee:	f080 808d 	bcs.w	8000f0c <__udivmoddi4+0x2ac>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 808a 	bls.w	8000f0c <__udivmoddi4+0x2ac>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b281      	uxth	r1, r0
 8000e00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb00 f308 	mul.w	r3, r0, r8
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x1c4>
 8000e14:	1879      	adds	r1, r7, r1
 8000e16:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e1a:	d273      	bcs.n	8000f04 <__udivmoddi4+0x2a4>
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d971      	bls.n	8000f04 <__udivmoddi4+0x2a4>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4439      	add	r1, r7
 8000e24:	1acb      	subs	r3, r1, r3
 8000e26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e2a:	e778      	b.n	8000d1e <__udivmoddi4+0xbe>
 8000e2c:	f1c6 0c20 	rsb	ip, r6, #32
 8000e30:	fa03 f406 	lsl.w	r4, r3, r6
 8000e34:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e38:	431c      	orrs	r4, r3
 8000e3a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e42:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e46:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e4a:	431f      	orrs	r7, r3
 8000e4c:	0c3b      	lsrs	r3, r7, #16
 8000e4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e52:	fa1f f884 	uxth.w	r8, r4
 8000e56:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e62:	458a      	cmp	sl, r1
 8000e64:	fa02 f206 	lsl.w	r2, r2, r6
 8000e68:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x220>
 8000e6e:	1861      	adds	r1, r4, r1
 8000e70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e74:	d248      	bcs.n	8000f08 <__udivmoddi4+0x2a8>
 8000e76:	458a      	cmp	sl, r1
 8000e78:	d946      	bls.n	8000f08 <__udivmoddi4+0x2a8>
 8000e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7e:	4421      	add	r1, r4
 8000e80:	eba1 010a 	sub.w	r1, r1, sl
 8000e84:	b2bf      	uxth	r7, r7
 8000e86:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e8a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e92:	fb00 f808 	mul.w	r8, r0, r8
 8000e96:	45b8      	cmp	r8, r7
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x24a>
 8000e9a:	19e7      	adds	r7, r4, r7
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d22e      	bcs.n	8000f00 <__udivmoddi4+0x2a0>
 8000ea2:	45b8      	cmp	r8, r7
 8000ea4:	d92c      	bls.n	8000f00 <__udivmoddi4+0x2a0>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4427      	add	r7, r4
 8000eaa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eae:	eba7 0708 	sub.w	r7, r7, r8
 8000eb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb6:	454f      	cmp	r7, r9
 8000eb8:	46c6      	mov	lr, r8
 8000eba:	4649      	mov	r1, r9
 8000ebc:	d31a      	bcc.n	8000ef4 <__udivmoddi4+0x294>
 8000ebe:	d017      	beq.n	8000ef0 <__udivmoddi4+0x290>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x27a>
 8000ec2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec6:	eb67 0701 	sbc.w	r7, r7, r1
 8000eca:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ece:	40f2      	lsrs	r2, r6
 8000ed0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed4:	40f7      	lsrs	r7, r6
 8000ed6:	e9c5 2700 	strd	r2, r7, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	462e      	mov	r6, r5
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	e70b      	b.n	8000d00 <__udivmoddi4+0xa0>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	e6e9      	b.n	8000cc0 <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fd      	b.n	8000cec <__udivmoddi4+0x8c>
 8000ef0:	4543      	cmp	r3, r8
 8000ef2:	d2e5      	bcs.n	8000ec0 <__udivmoddi4+0x260>
 8000ef4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef8:	eb69 0104 	sbc.w	r1, r9, r4
 8000efc:	3801      	subs	r0, #1
 8000efe:	e7df      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e7d2      	b.n	8000eaa <__udivmoddi4+0x24a>
 8000f04:	4660      	mov	r0, ip
 8000f06:	e78d      	b.n	8000e24 <__udivmoddi4+0x1c4>
 8000f08:	4681      	mov	r9, r0
 8000f0a:	e7b9      	b.n	8000e80 <__udivmoddi4+0x220>
 8000f0c:	4666      	mov	r6, ip
 8000f0e:	e775      	b.n	8000dfc <__udivmoddi4+0x19c>
 8000f10:	4630      	mov	r0, r6
 8000f12:	e74a      	b.n	8000daa <__udivmoddi4+0x14a>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	4439      	add	r1, r7
 8000f1a:	e713      	b.n	8000d44 <__udivmoddi4+0xe4>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	443c      	add	r4, r7
 8000f20:	e724      	b.n	8000d6c <__udivmoddi4+0x10c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fe22 	bl	8001b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f94e 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f000 faf8 	bl	8001528 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f38:	f000 fad6 	bl	80014e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 faaa 	bl	8001494 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f40:	f000 f9ae 	bl	80012a0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000f44:	f000 f9fe 	bl	8001344 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000f48:	f000 fa34 	bl	80013b4 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f4c:	f000 fa7e 	bl	800144c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start(&htim3);
 8000f50:	4887      	ldr	r0, [pc, #540]	; (8001170 <main+0x248>)
 8000f52:	f003 fa99 	bl	8004488 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim11);
 8000f56:	4887      	ldr	r0, [pc, #540]	; (8001174 <main+0x24c>)
 8000f58:	f003 faf0 	bl	800453c <HAL_TIM_Base_Start_IT>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4986      	ldr	r1, [pc, #536]	; (8001178 <main+0x250>)
 8000f60:	4886      	ldr	r0, [pc, #536]	; (800117c <main+0x254>)
 8000f62:	f000 fffd 	bl	8001f60 <HAL_ADC_Start_DMA>
//เอาไว้ตรงนี้เพื่อให้มันทำงาน
  	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4884      	ldr	r0, [pc, #528]	; (8001180 <main+0x258>)
 8000f6e:	f002 fa09 	bl	8003384 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    bitvhigh = ((4095*vhigh)/3.3);
 8000f72:	4b84      	ldr	r3, [pc, #528]	; (8001184 <main+0x25c>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001188 <main+0x260>
 8000f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f80:	ee17 0a90 	vmov	r0, s15
 8000f84:	f7ff fa8c 	bl	80004a0 <__aeabi_f2d>
 8000f88:	a377      	add	r3, pc, #476	; (adr r3, 8001168 <main+0x240>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc09 	bl	80007a4 <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fceb 	bl	8000974 <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a7a      	ldr	r2, [pc, #488]	; (800118c <main+0x264>)
 8000fa2:	6013      	str	r3, [r2, #0]
	    bitvlow = ((4095*vlow)/3.3);
 8000fa4:	4b7a      	ldr	r3, [pc, #488]	; (8001190 <main+0x268>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001188 <main+0x260>
 8000fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb2:	ee17 0a90 	vmov	r0, s15
 8000fb6:	f7ff fa73 	bl	80004a0 <__aeabi_f2d>
 8000fba:	a36b      	add	r3, pc, #428	; (adr r3, 8001168 <main+0x240>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fbf0 	bl	80007a4 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fcd2 	bl	8000974 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a70      	ldr	r2, [pc, #448]	; (8001194 <main+0x26c>)
 8000fd4:	6013      	str	r3, [r2, #0]
	    if(hz > 0)
 8000fd6:	4b70      	ldr	r3, [pc, #448]	; (8001198 <main+0x270>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	f340 80bc 	ble.w	8001160 <main+0x238>
	    {
				static uint64_t timestamp = 0;
				static uint64_t timestamp1 = 0;
				if (micros() - timestamp > (250/hz)) //100us = 10khz
 8000fe8:	f000 fb98 	bl	800171c <micros>
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <main+0x274>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	1a84      	subs	r4, r0, r2
 8000ff4:	eb61 0503 	sbc.w	r5, r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fdd2 	bl	8000ba4 <__aeabi_ul2f>
 8001000:	ee06 0a10 	vmov	s12, r0
 8001004:	4b64      	ldr	r3, [pc, #400]	; (8001198 <main+0x270>)
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	eddf 6a65 	vldr	s13, [pc, #404]	; 80011a0 <main+0x278>
 800100e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001012:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	f340 80a1 	ble.w	8001160 <main+0x238>
				{
						if(slopeup == 1)
 800101e:	4b61      	ldr	r3, [pc, #388]	; (80011a4 <main+0x27c>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001028:	eef4 7a47 	vcmp.f32	s15, s14
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d146      	bne.n	80010c0 <main+0x198>
						{
								 timestamp = micros();
 8001032:	f000 fb73 	bl	800171c <micros>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4958      	ldr	r1, [pc, #352]	; (800119c <main+0x274>)
 800103c:	e9c1 2300 	strd	r2, r3, [r1]
								 bitvolt++;
 8001040:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <main+0x280>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800104a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <main+0x280>)
 8001050:	edc3 7a00 	vstr	s15, [r3]
								 if(bitvolt == bitvhigh)
 8001054:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <main+0x280>)
 8001056:	ed93 7a00 	vldr	s14, [r3]
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <main+0x264>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eeb4 7a67 	vcmp.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d103      	bne.n	8001072 <main+0x14a>
								 {
									 bitvolt = 0;
 800106a:	4b4f      	ldr	r3, [pc, #316]	; (80011a8 <main+0x280>)
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
								 }
							//	 bitvoltuint%=4096;
								 bitvoltuint = bitvolt;
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <main+0x280>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <main+0x284>)
 8001084:	801a      	strh	r2, [r3, #0]
								 dataOut = bitvoltuint;
 8001086:	4b49      	ldr	r3, [pc, #292]	; (80011ac <main+0x284>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <main+0x288>)
 800108c:	801a      	strh	r2, [r3, #0]
								 if (hspi3.State == HAL_SPI_STATE_READY
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <main+0x28c>)
 8001090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	f47f af6b 	bne.w	8000f72 <main+0x4a>
											 && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800109c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a0:	4845      	ldr	r0, [pc, #276]	; (80011b8 <main+0x290>)
 80010a2:	f002 f957 	bl	8003354 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f47f af62 	bne.w	8000f72 <main+0x4a>
													 == GPIO_PIN_SET)
								 {
										 MCP4922SetOutput(DACConfig, dataOut);
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <main+0x294>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	4a3f      	ldr	r2, [pc, #252]	; (80011b0 <main+0x288>)
 80010b4:	8812      	ldrh	r2, [r2, #0]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fad5 	bl	8001668 <MCP4922SetOutput>
 80010be:	e758      	b.n	8000f72 <main+0x4a>
								 }
						  }
						  else if(slopedown == 1)
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <main+0x298>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ca:	eef4 7a47 	vcmp.f32	s15, s14
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	f47f af4e 	bne.w	8000f72 <main+0x4a>
						  {
							  	  timestamp1 = micros();
 80010d6:	f000 fb21 	bl	800171c <micros>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4939      	ldr	r1, [pc, #228]	; (80011c4 <main+0x29c>)
 80010e0:	e9c1 2300 	strd	r2, r3, [r1]
							  	  bitvolt1--;
 80010e4:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <main+0x2a0>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <main+0x2a0>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
							  	  if(bitvolt1 == bitvlow)
 80010f8:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <main+0x2a0>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <main+0x26c>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	eeb4 7a67 	vcmp.f32	s14, s15
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d102      	bne.n	8001114 <main+0x1ec>
							  	  {
							  		  bitvolt1 = 4095;
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <main+0x2a0>)
 8001110:	4a2e      	ldr	r2, [pc, #184]	; (80011cc <main+0x2a4>)
 8001112:	601a      	str	r2, [r3, #0]
							  	  }
								  bitvoltuint = bitvolt1;
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <main+0x2a0>)
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111e:	ee17 3a90 	vmov	r3, s15
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <main+0x284>)
 8001126:	801a      	strh	r2, [r3, #0]
								  dataOut = bitvoltuint;
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <main+0x284>)
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <main+0x288>)
 800112e:	801a      	strh	r2, [r3, #0]
								  if (hspi3.State == HAL_SPI_STATE_READY
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <main+0x28c>)
 8001132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	f47f af1a 	bne.w	8000f72 <main+0x4a>
												 && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800113e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001142:	481d      	ldr	r0, [pc, #116]	; (80011b8 <main+0x290>)
 8001144:	f002 f906 	bl	8003354 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	f47f af11 	bne.w	8000f72 <main+0x4a>
														 == GPIO_PIN_SET)
								  {
										 MCP4922SetOutput(DACConfig, dataOut);
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <main+0x294>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <main+0x288>)
 8001156:	8812      	ldrh	r2, [r2, #0]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fa84 	bl	8001668 <MCP4922SetOutput>
	    bitvhigh = ((4095*vhigh)/3.3);
 8001160:	e707      	b.n	8000f72 <main+0x4a>
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	66666666 	.word	0x66666666
 800116c:	400a6666 	.word	0x400a6666
 8001170:	20000078 	.word	0x20000078
 8001174:	20000160 	.word	0x20000160
 8001178:	20000044 	.word	0x20000044
 800117c:	20000118 	.word	0x20000118
 8001180:	40020000 	.word	0x40020000
 8001184:	2000000c 	.word	0x2000000c
 8001188:	457ff000 	.word	0x457ff000
 800118c:	20000010 	.word	0x20000010
 8001190:	20000058 	.word	0x20000058
 8001194:	2000005c 	.word	0x2000005c
 8001198:	20000008 	.word	0x20000008
 800119c:	20000068 	.word	0x20000068
 80011a0:	437a0000 	.word	0x437a0000
 80011a4:	20000060 	.word	0x20000060
 80011a8:	20000054 	.word	0x20000054
 80011ac:	20000050 	.word	0x20000050
 80011b0:	20000052 	.word	0x20000052
 80011b4:	200000c0 	.word	0x200000c0
 80011b8:	40020400 	.word	0x40020400
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000014 	.word	0x20000014
 80011c4:	20000070 	.word	0x20000070
 80011c8:	20000004 	.word	0x20000004
 80011cc:	457ff000 	.word	0x457ff000

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	; 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 ffd8 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <SystemClock_Config+0xc8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a26      	ldr	r2, [pc, #152]	; (8001298 <SystemClock_Config+0xc8>)
 80011fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <SystemClock_Config+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a20      	ldr	r2, [pc, #128]	; (800129c <SystemClock_Config+0xcc>)
 800121a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <SystemClock_Config+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2310      	movs	r3, #16
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001240:	2308      	movs	r3, #8
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800124c:	2304      	movs	r3, #4
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0320 	add.w	r3, r7, #32
 8001254:	4618      	mov	r0, r3
 8001256:	f002 f8af 	bl	80033b8 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001260:	f000 fa76 	bl	8001750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2103      	movs	r1, #3
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fb11 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800128c:	f000 fa60 	bl	8001750 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_ADC1_Init+0x9c>)
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_ADC1_Init+0xa0>)
 80012b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_ADC1_Init+0x9c>)
 80012ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_ADC1_Init+0x9c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_ADC1_Init+0x9c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_ADC1_Init+0x9c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_ADC1_Init+0x9c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_ADC1_Init+0x9c>)
 80012dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_ADC1_Init+0x9c>)
 80012e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_ADC1_Init+0x9c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_ADC1_Init+0x9c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_ADC1_Init+0x9c>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_ADC1_Init+0x9c>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_ADC1_Init+0x9c>)
 8001306:	f000 fca7 	bl	8001c58 <HAL_ADC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001310:	f000 fa1e 	bl	8001750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC1_Init+0x9c>)
 8001326:	f000 ff33 	bl	8002190 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 fa0e 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000118 	.word	0x20000118
 8001340:	40012000 	.word	0x40012000

08001344 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_SPI3_Init+0x68>)
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <MX_SPI3_Init+0x6c>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI3_Init+0x68>)
 8001350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001354:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_SPI3_Init+0x68>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_SPI3_Init+0x68>)
 800135e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001362:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI3_Init+0x68>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_SPI3_Init+0x68>)
 800136c:	2200      	movs	r2, #0
 800136e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI3_Init+0x68>)
 8001372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001376:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI3_Init+0x68>)
 800137a:	2220      	movs	r2, #32
 800137c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_SPI3_Init+0x68>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI3_Init+0x68>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_SPI3_Init+0x68>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI3_Init+0x68>)
 8001392:	220a      	movs	r2, #10
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_SPI3_Init+0x68>)
 8001398:	f002 fc82 	bl	8003ca0 <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80013a2:	f000 f9d5 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200000c0 	.word	0x200000c0
 80013b0:	40003c00 	.word	0x40003c00

080013b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM3_Init+0x90>)
 80013d2:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <MX_TIM3_Init+0x94>)
 80013d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM3_Init+0x90>)
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM3_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM3_Init+0x90>)
 80013e4:	2264      	movs	r2, #100	; 0x64
 80013e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_TIM3_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_TIM3_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_TIM3_Init+0x90>)
 80013f6:	f002 fff7 	bl	80043e8 <HAL_TIM_Base_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001400:	f000 f9a6 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM3_Init+0x90>)
 8001412:	f003 f9fd 	bl	8004810 <HAL_TIM_ConfigClockSource>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800141c:	f000 f998 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001420:	2320      	movs	r3, #32
 8001422:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM3_Init+0x90>)
 800142e:	f003 fbf5 	bl	8004c1c <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001438:	f000 f98a 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000078 	.word	0x20000078
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_TIM11_Init+0x40>)
 8001452:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <MX_TIM11_Init+0x44>)
 8001454:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_TIM11_Init+0x40>)
 8001458:	2264      	movs	r2, #100	; 0x64
 800145a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_TIM11_Init+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_TIM11_Init+0x40>)
 8001464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001468:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_TIM11_Init+0x40>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_TIM11_Init+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_TIM11_Init+0x40>)
 8001478:	f002 ffb6 	bl	80043e8 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001482:	f000 f965 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000160 	.word	0x20000160
 8001490:	40014800 	.word	0x40014800

08001494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <MX_USART2_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014cc:	f003 fc28 	bl	8004d20 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f000 f93b 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000208 	.word	0x20000208
 80014e4:	40004400 	.word	0x40004400

080014e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_DMA_Init+0x3c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <MX_DMA_Init+0x3c>)
 80014f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_DMA_Init+0x3c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2038      	movs	r0, #56	; 0x38
 8001510:	f001 f9d3 	bl	80028ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001514:	2038      	movs	r0, #56	; 0x38
 8001516:	f001 f9ec 	bl	80028f2 <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b44      	ldr	r3, [pc, #272]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a43      	ldr	r2, [pc, #268]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a3c      	ldr	r2, [pc, #240]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <MX_GPIO_Init+0x12c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <MX_GPIO_Init+0x12c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a35      	ldr	r2, [pc, #212]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <MX_GPIO_Init+0x12c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <MX_GPIO_Init+0x12c>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <MX_GPIO_Init+0x12c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	4829      	ldr	r0, [pc, #164]	; (8001658 <MX_GPIO_Init+0x130>)
 80015b4:	f001 fee6 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015be:	4827      	ldr	r0, [pc, #156]	; (800165c <MX_GPIO_Init+0x134>)
 80015c0:	f001 fee0 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	4825      	ldr	r0, [pc, #148]	; (8001660 <MX_GPIO_Init+0x138>)
 80015ca:	f001 fedb 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <MX_GPIO_Init+0x130>)
 80015d6:	f001 fed5 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_GPIO_Init+0x13c>)
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_GPIO_Init+0x138>)
 80015f0:	f001 fd2c 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 80015f4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <MX_GPIO_Init+0x130>)
 800160e:	f001 fd1d 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_GPIO_Init+0x134>)
 800162c:	f001 fd0e 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_GPIO_Init+0x138>)
 8001648:	f001 fd00 	bl	800304c <HAL_GPIO_Init>

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	10210000 	.word	0x10210000

08001668 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	460a      	mov	r2, r1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	80bb      	strh	r3, [r7, #4]
	//config คือ 4 bit บน เเละ dacoutput คือ 12 bit ล่าง
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	031b      	lsls	r3, r3, #12
 8001682:	b29b      	uxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168e:	4807      	ldr	r0, [pc, #28]	; (80016ac <MCP4922SetOutput+0x44>)
 8001690:	f001 fe78 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2201      	movs	r2, #1
 800169a:	4619      	mov	r1, r3
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MCP4922SetOutput+0x48>)
 800169e:	f002 fb89 	bl	8003db4 <HAL_SPI_Transmit_IT>
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020400 	.word	0x40020400
 80016b0:	200000c0 	.word	0x200000c0

080016b4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_SPI_TxCpltCallback+0x24>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d105      	bne.n	80016d0 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <HAL_SPI_TxCpltCallback+0x28>)
 80016cc:	f001 fe5a 	bl	8003384 <HAL_GPIO_WritePin>
	}
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000c0 	.word	0x200000c0
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b4b0      	push	{r4, r5, r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d10c      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	1814      	adds	r4, r2, r0
 8001700:	eb43 0501 	adc.w	r5, r3, r1
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001706:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bcb0      	pop	{r4, r5, r7}
 8001712:	4770      	bx	lr
 8001714:	20000160 	.word	0x20000160
 8001718:	20000048 	.word	0x20000048

0800171c <micros>:

inline uint64_t micros()
{
 800171c:	b4b0      	push	{r4, r5, r7}
 800171e:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <micros+0x2c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	4618      	mov	r0, r3
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <micros+0x30>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	1884      	adds	r4, r0, r2
 8001734:	eb41 0503 	adc.w	r5, r1, r3
 8001738:	4622      	mov	r2, r4
 800173a:	462b      	mov	r3, r5
}
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bcb0      	pop	{r4, r5, r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000160 	.word	0x20000160
 800174c:	20000048 	.word	0x20000048

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
}
 8001756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001758:	e7fe      	b.n	8001758 <Error_Handler+0x8>
	...

0800175c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_MspInit+0x4c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <HAL_MspInit+0x4c>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_MspInit+0x4c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_MspInit+0x4c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_MspInit+0x4c>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_MspInit+0x4c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179a:	2007      	movs	r0, #7
 800179c:	f001 f882 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a33      	ldr	r2, [pc, #204]	; (8001898 <HAL_ADC_MspInit+0xec>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d15f      	bne.n	800188e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_ADC_MspInit+0xf0>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_ADC_MspInit+0xf0>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_ADC_MspInit+0xf0>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_ADC_MspInit+0xf0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_ADC_MspInit+0xf0>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b28      	ldr	r3, [pc, #160]	; (800189c <HAL_ADC_MspInit+0xf0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001806:	2301      	movs	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4821      	ldr	r0, [pc, #132]	; (80018a0 <HAL_ADC_MspInit+0xf4>)
 800181a:	f001 fc17 	bl	800304c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_ADC_MspInit+0xfc>)
 8001822:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001844:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001848:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001854:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001862:	4810      	ldr	r0, [pc, #64]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001864:	f001 f860 	bl	8002928 <HAL_DMA_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800186e:	f7ff ff6f 	bl	8001750 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_ADC_MspInit+0xf8>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2012      	movs	r0, #18
 8001884:	f001 f819 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001888:	2012      	movs	r0, #18
 800188a:	f001 f832 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40012000 	.word	0x40012000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	200001a8 	.word	0x200001a8
 80018a8:	40026410 	.word	0x40026410

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d133      	bne.n	8001936 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_SPI_MspInit+0x98>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <HAL_SPI_MspInit+0x98>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_SPI_MspInit+0x98>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_SPI_MspInit+0x98>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_SPI_MspInit+0x98>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_SPI_MspInit+0x98>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001906:	2338      	movs	r3, #56	; 0x38
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001916:	2306      	movs	r3, #6
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <HAL_SPI_MspInit+0x9c>)
 8001922:	f001 fb93 	bl	800304c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2033      	movs	r0, #51	; 0x33
 800192c:	f000 ffc5 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001930:	2033      	movs	r0, #51	; 0x33
 8001932:	f000 ffde 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40003c00 	.word	0x40003c00
 8001944:	40023800 	.word	0x40023800
 8001948:	40020400 	.word	0x40020400

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_TIM_Base_MspInit+0x70>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10e      	bne.n	800197c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_TIM_Base_MspInit+0x74>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <HAL_TIM_Base_MspInit+0x74>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_TIM_Base_MspInit+0x74>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800197a:	e01a      	b.n	80019b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_TIM_Base_MspInit+0x78>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d115      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_TIM_Base_MspInit+0x74>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <HAL_TIM_Base_MspInit+0x74>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_TIM_Base_MspInit+0x74>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201a      	movs	r0, #26
 80019a8:	f000 ff87 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019ac:	201a      	movs	r0, #26
 80019ae:	f000 ffa0 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40014800 	.word	0x40014800

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_UART_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12b      	bne.n	8001a42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_UART_MspInit+0x88>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x88>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_UART_MspInit+0x88>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_UART_MspInit+0x88>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_UART_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_MspInit+0x8c>)
 8001a3e:	f001 fb05 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f8b8 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <ADC_IRQHandler+0x10>)
 8001ab2:	f000 f914 	bl	8001cde <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000118 	.word	0x20000118

08001ac0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ac6:	f002 fd9b 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000160 	.word	0x20000160

08001ad4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <SPI3_IRQHandler+0x10>)
 8001ada:	f002 f9f5 	bl	8003ec8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200000c0 	.word	0x200000c0

08001ae8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <DMA2_Stream0_IRQHandler+0x10>)
 8001aee:	f001 f843 	bl	8002b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200001a8 	.word	0x200001a8

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b3c:	4c0b      	ldr	r4, [pc, #44]	; (8001b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b4a:	f7ff ffd7 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f003 fafd 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff f9e9 	bl	8000f28 <main>
  bx  lr    
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001b64:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 8001b68:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001b6c:	20000250 	.word	0x20000250

08001b70 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <DMA1_Stream0_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_Init+0x40>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_Init+0x40>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x40>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 fe81 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fdd8 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fe99 	bl	800290e <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 fe61 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000018 	.word	0x20000018
 8001c10:	20000020 	.word	0x20000020
 8001c14:	2000001c 	.word	0x2000001c

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000020 	.word	0x20000020
 8001c3c:	2000024c 	.word	0x2000024c

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000024c 	.word	0x2000024c

08001c58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e033      	b.n	8001cd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fd98 	bl	80017ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d118      	bne.n	8001cc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c9e:	f023 0302 	bic.w	r3, r3, #2
 8001ca2:	f043 0202 	orr.w	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fba2 	bl	80023f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc6:	e001      	b.n	8001ccc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b20      	cmp	r3, #32
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d049      	beq.n	8001db4 <HAL_ADC_IRQHandler+0xd6>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d046      	beq.n	8001db4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d12b      	bne.n	8001da4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d127      	bne.n	8001da4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d119      	bne.n	8001da4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0220 	bic.w	r2, r2, #32
 8001d7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f9cb 	bl	8002140 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0212 	mvn.w	r2, #18
 8001db2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d057      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x1b8>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d054      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d139      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d12b      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d124      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11d      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e60:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fc32 	bl	80026f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 020c 	mvn.w	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x21a>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d014      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10d      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f93d 	bl	8002168 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0201 	mvn.w	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x27a>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0220 	mvn.w	r2, #32
 8001f46:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f917 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0220 	mvn.w	r2, #32
 8001f56:	601a      	str	r2, [r3, #0]
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x1e>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e0ce      	b.n	800211c <HAL_ADC_Start_DMA+0x1bc>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d018      	beq.n	8001fc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa4:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_ADC_Start_DMA+0x1c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5f      	ldr	r2, [pc, #380]	; (8002128 <HAL_ADC_Start_DMA+0x1c8>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9a      	lsrs	r2, r3, #18
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001fb8:	e002      	b.n	8001fc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f9      	bne.n	8001fba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd4:	d107      	bne.n	8001fe6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	f040 8086 	bne.w	8002102 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002020:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002034:	d106      	bne.n	8002044 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f023 0206 	bic.w	r2, r3, #6
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
 8002042:	e002      	b.n	800204a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_ADC_Start_DMA+0x1cc>)
 8002054:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4a35      	ldr	r2, [pc, #212]	; (8002130 <HAL_ADC_Start_DMA+0x1d0>)
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	4a34      	ldr	r2, [pc, #208]	; (8002134 <HAL_ADC_Start_DMA+0x1d4>)
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	4a33      	ldr	r2, [pc, #204]	; (8002138 <HAL_ADC_Start_DMA+0x1d8>)
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002076:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002086:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	334c      	adds	r3, #76	; 0x4c
 80020a2:	4619      	mov	r1, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f000 fcec 	bl	8002a84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10f      	bne.n	80020d8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d129      	bne.n	800211a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	e020      	b.n	800211a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_ADC_Start_DMA+0x1dc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d11b      	bne.n	800211a <HAL_ADC_Start_DMA+0x1ba>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d114      	bne.n	800211a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	e00b      	b.n	800211a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f043 0210 	orr.w	r2, r3, #16
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000018 	.word	0x20000018
 8002128:	431bde83 	.word	0x431bde83
 800212c:	40012300 	.word	0x40012300
 8002130:	080025ed 	.word	0x080025ed
 8002134:	080026a7 	.word	0x080026a7
 8002138:	080026c3 	.word	0x080026c3
 800213c:	40012000 	.word	0x40012000

08002140 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e113      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x244>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d925      	bls.n	8002208 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	2207      	movs	r2, #7
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43da      	mvns	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	400a      	ands	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68d9      	ldr	r1, [r3, #12]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4403      	add	r3, r0
 80021fa:	3b1e      	subs	r3, #30
 80021fc:	409a      	lsls	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	e022      	b.n	800224e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	2207      	movs	r2, #7
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	400a      	ands	r2, r1
 800222a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	4603      	mov	r3, r0
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4403      	add	r3, r0
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d824      	bhi.n	80022a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b05      	subs	r3, #5
 8002268:	221f      	movs	r2, #31
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3b05      	subs	r3, #5
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
 800229e:	e04c      	b.n	800233a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	d824      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b23      	subs	r3, #35	; 0x23
 80022ba:	221f      	movs	r2, #31
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43da      	mvns	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	400a      	ands	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b23      	subs	r3, #35	; 0x23
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
 80022f0:	e023      	b.n	800233a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b41      	subs	r3, #65	; 0x41
 8002304:	221f      	movs	r2, #31
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	400a      	ands	r2, r1
 8002312:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	3b41      	subs	r3, #65	; 0x41
 800232e:	fa00 f203 	lsl.w	r2, r0, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233a:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_ADC_ConfigChannel+0x250>)
 800233c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_ADC_ConfigChannel+0x254>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10f      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b12      	cmp	r3, #18
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_ADC_ConfigChannel+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12b      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_ADC_ConfigChannel+0x258>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x1f4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b11      	cmp	r3, #17
 8002382:	d122      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_ADC_ConfigChannel+0x258>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_ADC_ConfigChannel+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_ADC_ConfigChannel+0x260>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9a      	lsrs	r2, r3, #18
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012300 	.word	0x40012300
 80023e4:	40012000 	.word	0x40012000
 80023e8:	10000012 	.word	0x10000012
 80023ec:	20000018 	.word	0x20000018
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fc:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <ADC_Init+0x1f0>)
 80023fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <ADC_Init+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e00f      	b.n	80024f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0202 	bic.w	r2, r2, #2
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	005a      	lsls	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800253e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	035a      	lsls	r2, r3, #13
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e007      	b.n	8002568 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002566:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	3b01      	subs	r3, #1
 8002584:	051a      	lsls	r2, r3, #20
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025aa:	025a      	lsls	r2, r3, #9
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	029a      	lsls	r2, r3, #10
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012300 	.word	0x40012300
 80025e8:	0f000001 	.word	0x0f000001

080025ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13c      	bne.n	8002680 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12b      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d127      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0220 	bic.w	r2, r2, #32
 8002652:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fd61 	bl	8002140 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800267e:	e00e      	b.n	800269e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fd75 	bl	800217c <HAL_ADC_ErrorCallback>
}
 8002692:	e004      	b.n	800269e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff fd4d 	bl	8002154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff fd4a 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff29 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff3e 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff8e 	bl	80027f8 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff31 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffa2 	bl	8002860 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff f984 	bl	8001c40 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e099      	b.n	8002a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002964:	e00f      	b.n	8002986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002966:	f7ff f96b 	bl	8001c40 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b05      	cmp	r3, #5
 8002972:	d908      	bls.n	8002986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e078      	b.n	8002a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e8      	bne.n	8002966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_DMA_Init+0x158>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d117      	bne.n	8002a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fa91 	bl	8002f54 <DMA_CheckFifoParam>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a46:	2301      	movs	r3, #1
 8002a48:	e016      	b.n	8002a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa48 	bl	8002ee8 <DMA_CalcBaseAndBitshift>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	223f      	movs	r2, #63	; 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	f010803f 	.word	0xf010803f

08002a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_DMA_Start_IT+0x26>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e040      	b.n	8002b2c <HAL_DMA_Start_IT+0xa8>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d12f      	bne.n	8002b1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f9da 	bl	8002e8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	223f      	movs	r2, #63	; 0x3f
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0216 	orr.w	r2, r2, #22
 8002af2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0208 	orr.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e005      	b.n	8002b2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2280      	movs	r2, #128	; 0x80
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00c      	b.n	8002b6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2205      	movs	r2, #5
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b84:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_DMA_IRQHandler+0x258>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a92      	ldr	r2, [pc, #584]	; (8002dd4 <HAL_DMA_IRQHandler+0x25c>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01a      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be8:	2201      	movs	r2, #1
 8002bea:	409a      	lsls	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0202 	orr.w	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	2204      	movs	r2, #4
 8002c20:	409a      	lsls	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	2210      	movs	r2, #16
 8002c56:	409a      	lsls	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d043      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03c      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	2210      	movs	r2, #16
 8002c74:	409a      	lsls	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d018      	beq.n	8002cba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d108      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d024      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	e01f      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01b      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
 8002cb8:	e016      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0208 	bic.w	r2, r2, #8
 8002cd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2220      	movs	r2, #32
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 808e 	beq.w	8002e16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8086 	beq.w	8002e16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	2220      	movs	r2, #32
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d136      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0216 	bic.w	r2, r2, #22
 8002d30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x1da>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0208 	bic.w	r2, r2, #8
 8002d60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	223f      	movs	r2, #63	; 0x3f
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d07d      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
        }
        return;
 8002d8e:	e078      	b.n	8002e82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d030      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e02b      	b.n	8002e16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d027      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
 8002dce:	e022      	b.n	8002e16 <HAL_DMA_IRQHandler+0x29e>
 8002dd0:	20000018 	.word	0x20000018
 8002dd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0210 	bic.w	r2, r2, #16
 8002df4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d032      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d022      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d307      	bcc.n	8002e5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f2      	bne.n	8002e42 <HAL_DMA_IRQHandler+0x2ca>
 8002e5c:	e000      	b.n	8002e60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e000      	b.n	8002e84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e82:	bf00      	nop
    }
  }
}
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop

08002e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d108      	bne.n	8002ecc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eca:	e007      	b.n	8002edc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	60da      	str	r2, [r3, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3b10      	subs	r3, #16
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <DMA_CalcBaseAndBitshift+0x64>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <DMA_CalcBaseAndBitshift+0x68>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d909      	bls.n	8002f2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	1d1a      	adds	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	659a      	str	r2, [r3, #88]	; 0x58
 8002f28:	e007      	b.n	8002f3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	aaaaaaab 	.word	0xaaaaaaab
 8002f50:	080051d4 	.word	0x080051d4

08002f54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0x5a>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d856      	bhi.n	8003022 <DMA_CheckFifoParam+0xce>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <DMA_CheckFifoParam+0x28>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f9f 	.word	0x08002f9f
 8002f84:	08002f8d 	.word	0x08002f8d
 8002f88:	08003023 	.word	0x08003023
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d046      	beq.n	8003026 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9c:	e043      	b.n	8003026 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa6:	d140      	bne.n	800302a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fac:	e03d      	b.n	800302a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	d121      	bne.n	8002ffc <DMA_CheckFifoParam+0xa8>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d837      	bhi.n	800302e <DMA_CheckFifoParam+0xda>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <DMA_CheckFifoParam+0x70>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fdb 	.word	0x08002fdb
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	08002fed 	.word	0x08002fed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e030      	b.n	800303c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d025      	beq.n	8003032 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fea:	e022      	b.n	8003032 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ffa:	e01c      	b.n	8003036 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d903      	bls.n	800300a <DMA_CheckFifoParam+0xb6>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d003      	beq.n	8003010 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003008:	e018      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      break;
 800300e:	e015      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      break;
 8003020:	e00b      	b.n	800303a <DMA_CheckFifoParam+0xe6>
      break;
 8003022:	bf00      	nop
 8003024:	e00a      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e008      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800302a:	bf00      	nop
 800302c:	e006      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;   
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800303a:	bf00      	nop
    }
  } 
  
  return status; 
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e159      	b.n	800331c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8148 	bne.w	8003316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	2b02      	cmp	r3, #2
 800309c:	d130      	bne.n	8003100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a2 	beq.w	8003316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x202>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x1fe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x1fa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x1f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x300>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x1f2>
 800323a:	2304      	movs	r3, #4
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800323e:	2307      	movs	r3, #7
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x304>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f aea2 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40013800 	.word	0x40013800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40020800 	.word	0x40020800
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40021000 	.word	0x40021000
 8003350:	40013c00 	.word	0x40013c00

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033a0:	e003      	b.n	80033aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	041a      	lsls	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	619a      	str	r2, [r3, #24]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e264      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d075      	beq.n	80034c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d6:	4ba3      	ldr	r3, [pc, #652]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00c      	beq.n	80033fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4ba0      	ldr	r3, [pc, #640]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d112      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b9d      	ldr	r3, [pc, #628]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fa:	d10b      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b99      	ldr	r3, [pc, #612]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x108>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d157      	bne.n	80034c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e23f      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x74>
 800341e:	4b91      	ldr	r3, [pc, #580]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a90      	ldr	r2, [pc, #576]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8a      	ldr	r2, [pc, #552]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a87      	ldr	r2, [pc, #540]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 8003450:	4b84      	ldr	r3, [pc, #528]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a83      	ldr	r2, [pc, #524]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b81      	ldr	r3, [pc, #516]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a80      	ldr	r2, [pc, #512]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fbe6 	bl	8001c40 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7fe fbe2 	bl	8001c40 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e204      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xc0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fbd2 	bl	8001c40 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fbce 	bl	8001c40 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1f0      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	4b6c      	ldr	r3, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0xe8>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b62      	ldr	r3, [pc, #392]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d11c      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	4b5c      	ldr	r3, [pc, #368]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1c4      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b56      	ldr	r3, [pc, #344]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4952      	ldr	r1, [pc, #328]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	e03a      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <HAL_RCC_OscConfig+0x2b0>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe fb87 	bl	8001c40 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7fe fb83 	bl	8001c40 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1a5      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	4b46      	ldr	r3, [pc, #280]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4940      	ldr	r1, [pc, #256]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_OscConfig+0x2b0>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fb66 	bl	8001c40 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003578:	f7fe fb62 	bl	8001c40 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e184      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_OscConfig+0x2b4>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fe fb46 	bl	8001c40 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fe fb42 	bl	8001c40 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e164      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x200>
 80035d6:	e015      	b.n	8003604 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b24      	ldr	r3, [pc, #144]	; (800366c <HAL_RCC_OscConfig+0x2b4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fe fb2f 	bl	8001c40 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe fb2b 	bl	8001c40 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e14d      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a0 	beq.w	8003752 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_OscConfig+0x2b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d121      	bne.n	8003692 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_OscConfig+0x2b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a07      	ldr	r2, [pc, #28]	; (8003670 <HAL_RCC_OscConfig+0x2b8>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fe faf1 	bl	8001c40 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e011      	b.n	8003686 <HAL_RCC_OscConfig+0x2ce>
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	42470000 	.word	0x42470000
 800366c:	42470e80 	.word	0x42470e80
 8003670:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fe fae4 	bl	8001c40 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e106      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b85      	ldr	r3, [pc, #532]	; (800389c <HAL_RCC_OscConfig+0x4e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d106      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
 800369a:	4b81      	ldr	r3, [pc, #516]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	e01c      	b.n	80036e2 <HAL_RCC_OscConfig+0x32a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d10c      	bne.n	80036ca <HAL_RCC_OscConfig+0x312>
 80036b0:	4b7b      	ldr	r3, [pc, #492]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a7a      	ldr	r2, [pc, #488]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	4b78      	ldr	r3, [pc, #480]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a77      	ldr	r2, [pc, #476]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0x32a>
 80036ca:	4b75      	ldr	r3, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a74      	ldr	r2, [pc, #464]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	4b72      	ldr	r3, [pc, #456]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d015      	beq.n	8003716 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe faa9 	bl	8001c40 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe faa5 	bl	8001c40 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0c5      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCC_OscConfig+0x33a>
 8003714:	e014      	b.n	8003740 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fe fa93 	bl	8001c40 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371e:	f7fe fa8f 	bl	8001c40 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0af      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	4b5a      	ldr	r3, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b56      	ldr	r3, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a55      	ldr	r2, [pc, #340]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 809b 	beq.w	8003892 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d05c      	beq.n	8003822 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d141      	bne.n	80037f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <HAL_RCC_OscConfig+0x4ec>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fa63 	bl	8001c40 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe fa5f 	bl	8001c40 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e081      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	019b      	lsls	r3, r3, #6
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	4937      	ldr	r1, [pc, #220]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c6:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <HAL_RCC_OscConfig+0x4ec>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fa38 	bl	8001c40 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fa34 	bl	8001c40 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e056      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x41c>
 80037f2:	e04e      	b.n	8003892 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <HAL_RCC_OscConfig+0x4ec>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7fe fa21 	bl	8001c40 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003802:	f7fe fa1d 	bl	8001c40 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e03f      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f0      	bne.n	8003802 <HAL_RCC_OscConfig+0x44a>
 8003820:	e037      	b.n	8003892 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e032      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_RCC_OscConfig+0x4e8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d028      	beq.n	800388e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d121      	bne.n	800388e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d11a      	bne.n	800388e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003864:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d107      	bne.n	800388e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40007000 	.word	0x40007000
 80038a0:	40023800 	.word	0x40023800
 80038a4:	42470060 	.word	0x42470060

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0cc      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d90c      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d044      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d119      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e067      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4934      	ldr	r1, [pc, #208]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003998:	f7fe f952 	bl	8001c40 <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fe f94e 	bl	8001c40 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d20c      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2e:	f000 f821 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	490a      	ldr	r1, [pc, #40]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe f8b2 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023c00 	.word	0x40023c00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	080051bc 	.word	0x080051bc
 8003a6c:	20000018 	.word	0x20000018
 8003a70:	2000001c 	.word	0x2000001c

08003a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a8c:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d00d      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	f200 80bd 	bhi.w	8003c18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa6:	e0b7      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003aaa:	60bb      	str	r3, [r7, #8]
       break;
 8003aac:	e0b7      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aae:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ab0:	60bb      	str	r3, [r7, #8]
      break;
 8003ab2:	e0b4      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab4:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d04d      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	ea02 0800 	and.w	r8, r2, r0
 8003ae2:	ea03 0901 	and.w	r9, r3, r1
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	014b      	lsls	r3, r1, #5
 8003af4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af8:	0142      	lsls	r2, r0, #5
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	ebb0 0008 	subs.w	r0, r0, r8
 8003b02:	eb61 0109 	sbc.w	r1, r1, r9
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	018b      	lsls	r3, r1, #6
 8003b10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b14:	0182      	lsls	r2, r0, #6
 8003b16:	1a12      	subs	r2, r2, r0
 8003b18:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1c:	f04f 0000 	mov.w	r0, #0
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	00d9      	lsls	r1, r3, #3
 8003b26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b2a:	00d0      	lsls	r0, r2, #3
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	eb12 0208 	adds.w	r2, r2, r8
 8003b34:	eb43 0309 	adc.w	r3, r3, r9
 8003b38:	f04f 0000 	mov.w	r0, #0
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	0259      	lsls	r1, r3, #9
 8003b42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b46:	0250      	lsls	r0, r2, #9
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	f7fd f86a 	bl	8000c30 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e04a      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b76:	f04f 0100 	mov.w	r1, #0
 8003b7a:	ea02 0400 	and.w	r4, r2, r0
 8003b7e:	ea03 0501 	and.w	r5, r3, r1
 8003b82:	4620      	mov	r0, r4
 8003b84:	4629      	mov	r1, r5
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	014b      	lsls	r3, r1, #5
 8003b90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b94:	0142      	lsls	r2, r0, #5
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	1b00      	subs	r0, r0, r4
 8003b9c:	eb61 0105 	sbc.w	r1, r1, r5
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	018b      	lsls	r3, r1, #6
 8003baa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bae:	0182      	lsls	r2, r0, #6
 8003bb0:	1a12      	subs	r2, r2, r0
 8003bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb6:	f04f 0000 	mov.w	r0, #0
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	00d9      	lsls	r1, r3, #3
 8003bc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bc4:	00d0      	lsls	r0, r2, #3
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	1912      	adds	r2, r2, r4
 8003bcc:	eb45 0303 	adc.w	r3, r5, r3
 8003bd0:	f04f 0000 	mov.w	r0, #0
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	0299      	lsls	r1, r3, #10
 8003bda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bde:	0290      	lsls	r0, r2, #10
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	f7fd f81e 	bl	8000c30 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	60bb      	str	r3, [r7, #8]
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c1a:	60bb      	str	r3, [r7, #8]
      break;
 8003c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	007a1200 	.word	0x007a1200

08003c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000018 	.word	0x20000018

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	080051cc 	.word	0x080051cc

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff ffdc 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	080051cc 	.word	0x080051cc

08003ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07b      	b.n	8003daa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc2:	d009      	beq.n	8003cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	e005      	b.n	8003cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd fdda 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	ea42 0103 	orr.w	r1, r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0104 	and.w	r1, r3, #4
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	f003 0210 	and.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_SPI_Transmit_IT+0x20>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e06f      	b.n	8003eb4 <HAL_SPI_Transmit_IT+0x100>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_Transmit_IT+0x34>
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dec:	e05d      	b.n	8003eaa <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d002      	beq.n	8003e00 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dfe:	e054      	b.n	8003eaa <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2203      	movs	r2, #3
 8003e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <HAL_SPI_Transmit_IT+0x10c>)
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
 8003e46:	e002      	b.n	8003e4e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_SPI_Transmit_IT+0x110>)
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e56:	d10f      	bne.n	8003e78 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003e86:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d008      	beq.n	8003ea8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e000      	b.n	8003eaa <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8003ea8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	0800414b 	.word	0x0800414b
 8003ec4:	08004105 	.word	0x08004105

08003ec8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
    return;
 8003f0a:	e0d7      	b.n	80040bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x66>
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	09db      	lsrs	r3, r3, #7
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
    return;
 8003f2c:	e0c6      	b.n	80040bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_SPI_IRQHandler+0x8c>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80b4 	beq.w	80040bc <HAL_SPI_IRQHandler+0x1f4>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80ad 	beq.w	80040bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d023      	beq.n	8003fb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d011      	beq.n	8003f9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0204 	orr.w	r2, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	e00b      	b.n	8003fb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	693b      	ldr	r3, [r7, #16]
        return;
 8003fb4:	e082      	b.n	80040bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00c      	beq.n	8004012 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f043 0208 	orr.w	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04f      	beq.n	80040ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004028:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <HAL_SPI_IRQHandler+0x17e>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d034      	beq.n	80040b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0203 	bic.w	r2, r2, #3
 8004054:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d011      	beq.n	8004082 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_SPI_IRQHandler+0x1fc>)
 8004064:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fd62 	bl	8002b34 <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <HAL_SPI_IRQHandler+0x1fc>)
 8004090:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fd4c 	bl	8002b34 <HAL_DMA_Abort_IT>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80040ae:	e003      	b.n	80040b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f809 	bl	80040c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80040b6:	e000      	b.n	80040ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80040b8:	bf00      	nop
    return;
 80040ba:	bf00      	nop
  }
}
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	080040dd 	.word	0x080040dd

080040c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff ffe6 	bl	80040c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	7812      	ldrb	r2, [r2, #0]
 8004118:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f8f1 	bl	8004324 <SPI_CloseTx_ISR>
  }
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	1c9a      	adds	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f8cf 	bl	8004324 <SPI_CloseTx_ISR>
  }
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a0:	f7fd fd4e 	bl	8001c40 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b0:	f7fd fd46 	bl	8001c40 <HAL_GetTick>
 80041b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	015b      	lsls	r3, r3, #5
 80041bc:	0d1b      	lsrs	r3, r3, #20
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c6:	e054      	b.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d050      	beq.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d0:	f7fd fd36 	bl	8001c40 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d902      	bls.n	80041e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d13d      	bne.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fe:	d111      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d004      	beq.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d107      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422c:	d10f      	bne.n	800424e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e017      	b.n	8004292 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3b01      	subs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d19b      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000018 	.word	0x20000018

080042a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <SPI_EndRxTxTransaction+0x7c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <SPI_EndRxTxTransaction+0x80>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	0d5b      	lsrs	r3, r3, #21
 80042b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ca:	d112      	bne.n	80042f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff5a 	bl	8004190 <SPI_WaitFlagStateUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	2b80      	cmp	r3, #128	; 0x80
 800430a:	d0f2      	beq.n	80042f2 <SPI_EndRxTxTransaction+0x52>
 800430c:	e000      	b.n	8004310 <SPI_EndRxTxTransaction+0x70>
        break;
 800430e:	bf00      	nop
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000018 	.word	0x20000018
 8004320:	165e9f81 	.word	0x165e9f81

08004324 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800432c:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <SPI_CloseTx_ISR+0xbc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <SPI_CloseTx_ISR+0xc0>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0a5b      	lsrs	r3, r3, #9
 8004338:	2264      	movs	r2, #100	; 0x64
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004340:	f7fd fc7e 	bl	8001c40 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004358:	e009      	b.n	800436e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3b01      	subs	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0eb      	beq.n	8004346 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800437c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	2164      	movs	r1, #100	; 0x64
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff8c 	bl	80042a0 <SPI_EndRxTxTransaction>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff fe7d 	bl	80040c8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80043ce:	e002      	b.n	80043d6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fd f96f 	bl	80016b4 <HAL_SPI_TxCpltCallback>
}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000018 	.word	0x20000018
 80043e4:	057619f1 	.word	0x057619f1

080043e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e041      	b.n	800447e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fa9c 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 fade 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d001      	beq.n	80044a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e03c      	b.n	800451a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_TIM_Base_Start+0xa0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d018      	beq.n	80044e4 <HAL_TIM_Base_Start+0x5c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d013      	beq.n	80044e4 <HAL_TIM_Base_Start+0x5c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <HAL_TIM_Base_Start+0xa4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00e      	beq.n	80044e4 <HAL_TIM_Base_Start+0x5c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_TIM_Base_Start+0xa8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_TIM_Base_Start+0x5c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a17      	ldr	r2, [pc, #92]	; (8004534 <HAL_TIM_Base_Start+0xac>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_TIM_Base_Start+0x5c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a16      	ldr	r2, [pc, #88]	; (8004538 <HAL_TIM_Base_Start+0xb0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d111      	bne.n	8004508 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d010      	beq.n	8004518 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	e007      	b.n	8004518 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40014000 	.word	0x40014000

0800453c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e044      	b.n	80045de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457e:	d013      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIM_Base_Start_IT+0xc0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d010      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e007      	b.n	80045dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0202 	mvn.w	r2, #2
 800462c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9b2 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9a4 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f9b5 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b04      	cmp	r3, #4
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f988 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f97a 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f98b 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0208 	mvn.w	r2, #8
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f95e 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f950 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f961 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0210 	mvn.w	r2, #16
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2208      	movs	r2, #8
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f934 	bl	80049ac <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f926 	bl	8004998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f937 	bl	80049c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc ffae 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 faae 	bl	8004d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8fc 	bl	80049d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0220 	mvn.w	r2, #32
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa78 	bl	8004cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_TIM_ConfigClockSource+0x18>
 8004824:	2302      	movs	r3, #2
 8004826:	e0b3      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x180>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004860:	d03e      	beq.n	80048e0 <HAL_TIM_ConfigClockSource+0xd0>
 8004862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004866:	f200 8087 	bhi.w	8004978 <HAL_TIM_ConfigClockSource+0x168>
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486e:	f000 8085 	beq.w	800497c <HAL_TIM_ConfigClockSource+0x16c>
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d87f      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 8004878:	2b70      	cmp	r3, #112	; 0x70
 800487a:	d01a      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0xa2>
 800487c:	2b70      	cmp	r3, #112	; 0x70
 800487e:	d87b      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d050      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x116>
 8004884:	2b60      	cmp	r3, #96	; 0x60
 8004886:	d877      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 8004888:	2b50      	cmp	r3, #80	; 0x50
 800488a:	d03c      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0xf6>
 800488c:	2b50      	cmp	r3, #80	; 0x50
 800488e:	d873      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d058      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x136>
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d86f      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d064      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x156>
 800489c:	2b30      	cmp	r3, #48	; 0x30
 800489e:	d86b      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d060      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x156>
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d867      	bhi.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05c      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x156>
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d05a      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048b0:	e062      	b.n	8004978 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f000 f98b 	bl	8004bdc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	609a      	str	r2, [r3, #8]
      break;
 80048de:	e04e      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6899      	ldr	r1, [r3, #8]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f000 f974 	bl	8004bdc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004902:	609a      	str	r2, [r3, #8]
      break;
 8004904:	e03b      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	461a      	mov	r2, r3
 8004914:	f000 f8e8 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2150      	movs	r1, #80	; 0x50
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f941 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004924:	e02b      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6859      	ldr	r1, [r3, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	461a      	mov	r2, r3
 8004934:	f000 f907 	bl	8004b46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2160      	movs	r1, #96	; 0x60
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f931 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004944:	e01b      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	461a      	mov	r2, r3
 8004954:	f000 f8c8 	bl	8004ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2140      	movs	r1, #64	; 0x40
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f921 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004964:	e00b      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f000 f918 	bl	8004ba6 <TIM_ITRx_SetConfig>
        break;
 8004976:	e002      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800497c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a34      	ldr	r2, [pc, #208]	; (8004acc <TIM_Base_SetConfig+0xe4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00f      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a06:	d00b      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a31      	ldr	r2, [pc, #196]	; (8004ad0 <TIM_Base_SetConfig+0xe8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a30      	ldr	r2, [pc, #192]	; (8004ad4 <TIM_Base_SetConfig+0xec>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0x38>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a2f      	ldr	r2, [pc, #188]	; (8004ad8 <TIM_Base_SetConfig+0xf0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d108      	bne.n	8004a32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a25      	ldr	r2, [pc, #148]	; (8004acc <TIM_Base_SetConfig+0xe4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01b      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a40:	d017      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <TIM_Base_SetConfig+0xe8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <TIM_Base_SetConfig+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00f      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <TIM_Base_SetConfig+0xf0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <TIM_Base_SetConfig+0xf4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <TIM_Base_SetConfig+0xf8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_Base_SetConfig+0x8a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <TIM_Base_SetConfig+0xfc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a08      	ldr	r2, [pc, #32]	; (8004acc <TIM_Base_SetConfig+0xe4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d103      	bne.n	8004ab8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	615a      	str	r2, [r3, #20]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800

08004ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 030a 	bic.w	r3, r3, #10
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f023 0210 	bic.w	r2, r3, #16
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	031b      	lsls	r3, r3, #12
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f043 0307 	orr.w	r3, r3, #7
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e050      	b.n	8004cd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d018      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d013      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a16      	ldr	r2, [pc, #88]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40014000 	.word	0x40014000

08004cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e03f      	b.n	8004db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc fe3e 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f829 	bl	8004dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	b09f      	sub	sp, #124	; 0x7c
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd2:	68d9      	ldr	r1, [r3, #12]
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	ea40 0301 	orr.w	r3, r0, r1
 8004ddc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e00:	f021 010c 	bic.w	r1, r1, #12
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	6999      	ldr	r1, [r3, #24]
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	ea40 0301 	orr.w	r3, r0, r1
 8004e24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4bc5      	ldr	r3, [pc, #788]	; (8005140 <UART_SetConfig+0x384>)
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d004      	beq.n	8004e3a <UART_SetConfig+0x7e>
 8004e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4bc3      	ldr	r3, [pc, #780]	; (8005144 <UART_SetConfig+0x388>)
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d103      	bne.n	8004e42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e3a:	f7fe ff1d 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 8004e3e:	6778      	str	r0, [r7, #116]	; 0x74
 8004e40:	e002      	b.n	8004e48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e42:	f7fe ff05 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8004e46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e50:	f040 80b6 	bne.w	8004fc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e56:	461c      	mov	r4, r3
 8004e58:	f04f 0500 	mov.w	r5, #0
 8004e5c:	4622      	mov	r2, r4
 8004e5e:	462b      	mov	r3, r5
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	6439      	str	r1, [r7, #64]	; 0x40
 8004e64:	415b      	adcs	r3, r3
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
 8004e68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e6c:	1912      	adds	r2, r2, r4
 8004e6e:	eb45 0303 	adc.w	r3, r5, r3
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f04f 0100 	mov.w	r1, #0
 8004e7a:	00d9      	lsls	r1, r3, #3
 8004e7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e80:	00d0      	lsls	r0, r2, #3
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	1911      	adds	r1, r2, r4
 8004e88:	6639      	str	r1, [r7, #96]	; 0x60
 8004e8a:	416b      	adcs	r3, r5
 8004e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ea4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ea8:	f7fb fec2 	bl	8000c30 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4ba5      	ldr	r3, [pc, #660]	; (8005148 <UART_SetConfig+0x38c>)
 8004eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	011e      	lsls	r6, r3, #4
 8004eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ebc:	461c      	mov	r4, r3
 8004ebe:	f04f 0500 	mov.w	r5, #0
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	1891      	adds	r1, r2, r2
 8004ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8004eca:	415b      	adcs	r3, r3
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ece:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ed2:	1912      	adds	r2, r2, r4
 8004ed4:	eb45 0303 	adc.w	r3, r5, r3
 8004ed8:	f04f 0000 	mov.w	r0, #0
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	00d9      	lsls	r1, r3, #3
 8004ee2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ee6:	00d0      	lsls	r0, r2, #3
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	1911      	adds	r1, r2, r4
 8004eee:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ef0:	416b      	adcs	r3, r5
 8004ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f02:	415b      	adcs	r3, r3
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f0e:	f7fb fe8f 	bl	8000c30 <__aeabi_uldivmod>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4b8c      	ldr	r3, [pc, #560]	; (8005148 <UART_SetConfig+0x38c>)
 8004f18:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	2164      	movs	r1, #100	; 0x64
 8004f20:	fb01 f303 	mul.w	r3, r1, r3
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	3332      	adds	r3, #50	; 0x32
 8004f2a:	4a87      	ldr	r2, [pc, #540]	; (8005148 <UART_SetConfig+0x38c>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f38:	441e      	add	r6, r3
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	1894      	adds	r4, r2, r2
 8004f48:	623c      	str	r4, [r7, #32]
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f52:	1812      	adds	r2, r2, r0
 8004f54:	eb41 0303 	adc.w	r3, r1, r3
 8004f58:	f04f 0400 	mov.w	r4, #0
 8004f5c:	f04f 0500 	mov.w	r5, #0
 8004f60:	00dd      	lsls	r5, r3, #3
 8004f62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f66:	00d4      	lsls	r4, r2, #3
 8004f68:	4622      	mov	r2, r4
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	1814      	adds	r4, r2, r0
 8004f6e:	653c      	str	r4, [r7, #80]	; 0x50
 8004f70:	414b      	adcs	r3, r1
 8004f72:	657b      	str	r3, [r7, #84]	; 0x54
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	1891      	adds	r1, r2, r2
 8004f80:	61b9      	str	r1, [r7, #24]
 8004f82:	415b      	adcs	r3, r3
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f8e:	f7fb fe4f 	bl	8000c30 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <UART_SetConfig+0x38c>)
 8004f98:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	2164      	movs	r1, #100	; 0x64
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	3332      	adds	r3, #50	; 0x32
 8004faa:	4a67      	ldr	r2, [pc, #412]	; (8005148 <UART_SetConfig+0x38c>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	f003 0207 	and.w	r2, r3, #7
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4432      	add	r2, r6
 8004fbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fbe:	e0b9      	b.n	8005134 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc2:	461c      	mov	r4, r3
 8004fc4:	f04f 0500 	mov.w	r5, #0
 8004fc8:	4622      	mov	r2, r4
 8004fca:	462b      	mov	r3, r5
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	6139      	str	r1, [r7, #16]
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fd8:	1912      	adds	r2, r2, r4
 8004fda:	eb45 0303 	adc.w	r3, r5, r3
 8004fde:	f04f 0000 	mov.w	r0, #0
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	00d9      	lsls	r1, r3, #3
 8004fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fec:	00d0      	lsls	r0, r2, #3
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	eb12 0804 	adds.w	r8, r2, r4
 8004ff6:	eb43 0905 	adc.w	r9, r3, r5
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	008b      	lsls	r3, r1, #2
 800500e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005012:	0082      	lsls	r2, r0, #2
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fe0a 	bl	8000c30 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b49      	ldr	r3, [pc, #292]	; (8005148 <UART_SetConfig+0x38c>)
 8005022:	fba3 2302 	umull	r2, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	011e      	lsls	r6, r3, #4
 800502a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800502c:	4618      	mov	r0, r3
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	1894      	adds	r4, r2, r2
 8005038:	60bc      	str	r4, [r7, #8]
 800503a:	415b      	adcs	r3, r3
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005042:	1812      	adds	r2, r2, r0
 8005044:	eb41 0303 	adc.w	r3, r1, r3
 8005048:	f04f 0400 	mov.w	r4, #0
 800504c:	f04f 0500 	mov.w	r5, #0
 8005050:	00dd      	lsls	r5, r3, #3
 8005052:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005056:	00d4      	lsls	r4, r2, #3
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	1814      	adds	r4, r2, r0
 800505e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005060:	414b      	adcs	r3, r1
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4618      	mov	r0, r3
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	008b      	lsls	r3, r1, #2
 8005078:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800507c:	0082      	lsls	r2, r0, #2
 800507e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005082:	f7fb fdd5 	bl	8000c30 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <UART_SetConfig+0x38c>)
 800508c:	fba3 1302 	umull	r1, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	2164      	movs	r1, #100	; 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	3332      	adds	r3, #50	; 0x32
 800509e:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <UART_SetConfig+0x38c>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050aa:	441e      	add	r6, r3
 80050ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ae:	4618      	mov	r0, r3
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	1894      	adds	r4, r2, r2
 80050ba:	603c      	str	r4, [r7, #0]
 80050bc:	415b      	adcs	r3, r3
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c4:	1812      	adds	r2, r2, r0
 80050c6:	eb41 0303 	adc.w	r3, r1, r3
 80050ca:	f04f 0400 	mov.w	r4, #0
 80050ce:	f04f 0500 	mov.w	r5, #0
 80050d2:	00dd      	lsls	r5, r3, #3
 80050d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050d8:	00d4      	lsls	r4, r2, #3
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	eb12 0a00 	adds.w	sl, r2, r0
 80050e2:	eb43 0b01 	adc.w	fp, r3, r1
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f04f 0100 	mov.w	r1, #0
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	008b      	lsls	r3, r1, #2
 80050fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050fe:	0082      	lsls	r2, r0, #2
 8005100:	4650      	mov	r0, sl
 8005102:	4659      	mov	r1, fp
 8005104:	f7fb fd94 	bl	8000c30 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <UART_SetConfig+0x38c>)
 800510e:	fba3 1302 	umull	r1, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2164      	movs	r1, #100	; 0x64
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	3332      	adds	r3, #50	; 0x32
 8005120:	4a09      	ldr	r2, [pc, #36]	; (8005148 <UART_SetConfig+0x38c>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4432      	add	r2, r6
 8005132:	609a      	str	r2, [r3, #8]
}
 8005134:	bf00      	nop
 8005136:	377c      	adds	r7, #124	; 0x7c
 8005138:	46bd      	mov	sp, r7
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	bf00      	nop
 8005140:	40011000 	.word	0x40011000
 8005144:	40011400 	.word	0x40011400
 8005148:	51eb851f 	.word	0x51eb851f

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 f820 	bl	80051a4 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	080051e4 	.word	0x080051e4
 8005188:	080051e4 	.word	0x080051e4
 800518c:	080051e4 	.word	0x080051e4
 8005190:	080051e8 	.word	0x080051e8

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <_init>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr

080051b0 <_fini>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr
